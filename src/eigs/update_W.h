/*******************************************************************************
 * Copyright (c) 2018, College of William & Mary
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the College of William & Mary nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COLLEGE OF WILLIAM & MARY BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * PRIMME: https://github.com/primme/primme
 * Contact: Andreas Stathopoulos, a n d r e a s _at_ c s . w m . e d u
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef update_W_H
#define update_W_H
int matrixMatvec_hprimme(dummy_type_hprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_hprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_hprimme(dummy_type_hprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_hprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_hprimme(dummy_type_hprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_hprimme *W,
      PRIMME_INT ldW, dummy_type_hprimme *Q, PRIMME_INT ldQ, dummy_type_sprimme *R, int ldR,
      dummy_type_sprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
int matrixMatvec_kprimme(dummy_type_kprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_kprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_kprimme(dummy_type_kprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_kprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_kprimme(dummy_type_kprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_kprimme *W,
      PRIMME_INT ldW, dummy_type_kprimme *Q, PRIMME_INT ldQ, dummy_type_cprimme *R, int ldR,
      dummy_type_cprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
int matrixMatvec_sprimme(dummy_type_sprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_sprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_sprimme(dummy_type_sprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_sprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_sprimme(dummy_type_sprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_sprimme *W,
      PRIMME_INT ldW, dummy_type_sprimme *Q, PRIMME_INT ldQ, dummy_type_sprimme *R, int ldR,
      dummy_type_sprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
int matrixMatvec_cprimme(dummy_type_cprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_cprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_cprimme(dummy_type_cprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_cprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_cprimme(dummy_type_cprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_cprimme *W,
      PRIMME_INT ldW, dummy_type_cprimme *Q, PRIMME_INT ldQ, dummy_type_cprimme *R, int ldR,
      dummy_type_cprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_Sprimme)
#  define matrixMatvec_Sprimme CONCAT(matrixMatvec_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_Rprimme)
#  define matrixMatvec_Rprimme CONCAT(matrixMatvec_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_SHprimme)
#  define matrixMatvec_SHprimme CONCAT(matrixMatvec_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_RHprimme)
#  define matrixMatvec_RHprimme CONCAT(matrixMatvec_,HOST_REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_SXprimme)
#  define matrixMatvec_SXprimme CONCAT(matrixMatvec_,XSCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_RXprimme)
#  define matrixMatvec_RXprimme CONCAT(matrixMatvec_,XREAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_Shprimme)
#  define matrixMatvec_Shprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(STEM_C,USE_ARITH(h,k)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_Rhprimme)
#  define matrixMatvec_Rhprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(STEM_C,h),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_Ssprimme)
#  define matrixMatvec_Ssprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(STEM_C,USE_ARITH(s,c)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_Rsprimme)
#  define matrixMatvec_Rsprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(STEM_C,s),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_Sdprimme)
#  define matrixMatvec_Sdprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(STEM_C,USE_ARITH(d,z)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_Rdprimme)
#  define matrixMatvec_Rdprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(STEM_C,d),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_Sqprimme)
#  define matrixMatvec_Sqprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(STEM_C,USE_ARITH(q,w)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_Rqprimme)
#  define matrixMatvec_Rqprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(STEM_C,q),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_SXhprimme)
#  define matrixMatvec_SXhprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(,USE_ARITH(h,k)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_RXhprimme)
#  define matrixMatvec_RXhprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(,h),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_SXsprimme)
#  define matrixMatvec_SXsprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(,USE_ARITH(s,c)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_RXsprimme)
#  define matrixMatvec_RXsprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(,s),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_SXdprimme)
#  define matrixMatvec_SXdprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(,USE_ARITH(d,z)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_RXdprimme)
#  define matrixMatvec_RXdprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(,d),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_SXqprimme)
#  define matrixMatvec_SXqprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(,USE_ARITH(q,w)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_RXqprimme)
#  define matrixMatvec_RXqprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(,q),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_SHhprimme)
#  define matrixMatvec_SHhprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(,USE_ARITH(s,c)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_RHhprimme)
#  define matrixMatvec_RHhprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(,s),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_SHsprimme)
#  define matrixMatvec_SHsprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(,USE_ARITH(s,c)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_RHsprimme)
#  define matrixMatvec_RHsprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(,s),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_SHdprimme)
#  define matrixMatvec_SHdprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(,USE_ARITH(d,z)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_RHdprimme)
#  define matrixMatvec_RHdprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(,d),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_SHqprimme)
#  define matrixMatvec_SHqprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(,USE_ARITH(q,w)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_RHqprimme)
#  define matrixMatvec_RHqprimme CONCAT(matrixMatvec_,CONCAT(CONCAT(,q),primme))
#endif
int matrixMatvec_dprimme(dummy_type_dprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_dprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_Sprimme)
#  define massMatrixMatvec_Sprimme CONCAT(massMatrixMatvec_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_Rprimme)
#  define massMatrixMatvec_Rprimme CONCAT(massMatrixMatvec_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_SHprimme)
#  define massMatrixMatvec_SHprimme CONCAT(massMatrixMatvec_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_RHprimme)
#  define massMatrixMatvec_RHprimme CONCAT(massMatrixMatvec_,HOST_REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_SXprimme)
#  define massMatrixMatvec_SXprimme CONCAT(massMatrixMatvec_,XSCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_RXprimme)
#  define massMatrixMatvec_RXprimme CONCAT(massMatrixMatvec_,XREAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_Shprimme)
#  define massMatrixMatvec_Shprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(STEM_C,USE_ARITH(h,k)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_Rhprimme)
#  define massMatrixMatvec_Rhprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(STEM_C,h),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_Ssprimme)
#  define massMatrixMatvec_Ssprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(STEM_C,USE_ARITH(s,c)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_Rsprimme)
#  define massMatrixMatvec_Rsprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(STEM_C,s),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_Sdprimme)
#  define massMatrixMatvec_Sdprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(STEM_C,USE_ARITH(d,z)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_Rdprimme)
#  define massMatrixMatvec_Rdprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(STEM_C,d),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_Sqprimme)
#  define massMatrixMatvec_Sqprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(STEM_C,USE_ARITH(q,w)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_Rqprimme)
#  define massMatrixMatvec_Rqprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(STEM_C,q),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_SXhprimme)
#  define massMatrixMatvec_SXhprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(,USE_ARITH(h,k)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_RXhprimme)
#  define massMatrixMatvec_RXhprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(,h),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_SXsprimme)
#  define massMatrixMatvec_SXsprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(,USE_ARITH(s,c)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_RXsprimme)
#  define massMatrixMatvec_RXsprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(,s),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_SXdprimme)
#  define massMatrixMatvec_SXdprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(,USE_ARITH(d,z)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_RXdprimme)
#  define massMatrixMatvec_RXdprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(,d),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_SXqprimme)
#  define massMatrixMatvec_SXqprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(,USE_ARITH(q,w)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_RXqprimme)
#  define massMatrixMatvec_RXqprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(,q),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_SHhprimme)
#  define massMatrixMatvec_SHhprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(,USE_ARITH(s,c)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_RHhprimme)
#  define massMatrixMatvec_RHhprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(,s),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_SHsprimme)
#  define massMatrixMatvec_SHsprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(,USE_ARITH(s,c)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_RHsprimme)
#  define massMatrixMatvec_RHsprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(,s),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_SHdprimme)
#  define massMatrixMatvec_SHdprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(,USE_ARITH(d,z)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_RHdprimme)
#  define massMatrixMatvec_RHdprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(,d),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_SHqprimme)
#  define massMatrixMatvec_SHqprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(,USE_ARITH(q,w)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_RHqprimme)
#  define massMatrixMatvec_RHqprimme CONCAT(massMatrixMatvec_,CONCAT(CONCAT(,q),primme))
#endif
int massMatrixMatvec_dprimme(dummy_type_dprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_dprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_Sprimme)
#  define update_Q_Sprimme CONCAT(update_Q_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_Rprimme)
#  define update_Q_Rprimme CONCAT(update_Q_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_SHprimme)
#  define update_Q_SHprimme CONCAT(update_Q_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_RHprimme)
#  define update_Q_RHprimme CONCAT(update_Q_,HOST_REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_SXprimme)
#  define update_Q_SXprimme CONCAT(update_Q_,XSCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_RXprimme)
#  define update_Q_RXprimme CONCAT(update_Q_,XREAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_Shprimme)
#  define update_Q_Shprimme CONCAT(update_Q_,CONCAT(CONCAT(STEM_C,USE_ARITH(h,k)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_Rhprimme)
#  define update_Q_Rhprimme CONCAT(update_Q_,CONCAT(CONCAT(STEM_C,h),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_Ssprimme)
#  define update_Q_Ssprimme CONCAT(update_Q_,CONCAT(CONCAT(STEM_C,USE_ARITH(s,c)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_Rsprimme)
#  define update_Q_Rsprimme CONCAT(update_Q_,CONCAT(CONCAT(STEM_C,s),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_Sdprimme)
#  define update_Q_Sdprimme CONCAT(update_Q_,CONCAT(CONCAT(STEM_C,USE_ARITH(d,z)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_Rdprimme)
#  define update_Q_Rdprimme CONCAT(update_Q_,CONCAT(CONCAT(STEM_C,d),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_Sqprimme)
#  define update_Q_Sqprimme CONCAT(update_Q_,CONCAT(CONCAT(STEM_C,USE_ARITH(q,w)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_Rqprimme)
#  define update_Q_Rqprimme CONCAT(update_Q_,CONCAT(CONCAT(STEM_C,q),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_SXhprimme)
#  define update_Q_SXhprimme CONCAT(update_Q_,CONCAT(CONCAT(,USE_ARITH(h,k)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_RXhprimme)
#  define update_Q_RXhprimme CONCAT(update_Q_,CONCAT(CONCAT(,h),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_SXsprimme)
#  define update_Q_SXsprimme CONCAT(update_Q_,CONCAT(CONCAT(,USE_ARITH(s,c)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_RXsprimme)
#  define update_Q_RXsprimme CONCAT(update_Q_,CONCAT(CONCAT(,s),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_SXdprimme)
#  define update_Q_SXdprimme CONCAT(update_Q_,CONCAT(CONCAT(,USE_ARITH(d,z)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_RXdprimme)
#  define update_Q_RXdprimme CONCAT(update_Q_,CONCAT(CONCAT(,d),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_SXqprimme)
#  define update_Q_SXqprimme CONCAT(update_Q_,CONCAT(CONCAT(,USE_ARITH(q,w)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_RXqprimme)
#  define update_Q_RXqprimme CONCAT(update_Q_,CONCAT(CONCAT(,q),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_SHhprimme)
#  define update_Q_SHhprimme CONCAT(update_Q_,CONCAT(CONCAT(,USE_ARITH(s,c)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_RHhprimme)
#  define update_Q_RHhprimme CONCAT(update_Q_,CONCAT(CONCAT(,s),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_SHsprimme)
#  define update_Q_SHsprimme CONCAT(update_Q_,CONCAT(CONCAT(,USE_ARITH(s,c)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_RHsprimme)
#  define update_Q_RHsprimme CONCAT(update_Q_,CONCAT(CONCAT(,s),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_SHdprimme)
#  define update_Q_SHdprimme CONCAT(update_Q_,CONCAT(CONCAT(,USE_ARITH(d,z)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_RHdprimme)
#  define update_Q_RHdprimme CONCAT(update_Q_,CONCAT(CONCAT(,d),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_SHqprimme)
#  define update_Q_SHqprimme CONCAT(update_Q_,CONCAT(CONCAT(,USE_ARITH(q,w)),primme))
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_RHqprimme)
#  define update_Q_RHqprimme CONCAT(update_Q_,CONCAT(CONCAT(,q),primme))
#endif
int update_Q_dprimme(dummy_type_dprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_dprimme *W,
      PRIMME_INT ldW, dummy_type_dprimme *Q, PRIMME_INT ldQ, dummy_type_dprimme *R, int ldR,
      dummy_type_dprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
int matrixMatvec_zprimme(dummy_type_zprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_zprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_zprimme(dummy_type_zprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_zprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_zprimme(dummy_type_zprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_zprimme *W,
      PRIMME_INT ldW, dummy_type_zprimme *Q, PRIMME_INT ldQ, dummy_type_zprimme *R, int ldR,
      dummy_type_zprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
int matrixMatvec_magma_sprimme(dummy_type_magma_sprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_sprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_magma_sprimme(dummy_type_magma_sprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_sprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_magma_sprimme(dummy_type_magma_sprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_magma_sprimme *W,
      PRIMME_INT ldW, dummy_type_magma_sprimme *Q, PRIMME_INT ldQ, dummy_type_sprimme *R, int ldR,
      dummy_type_sprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
int matrixMatvec_magma_cprimme(dummy_type_magma_cprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_cprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_magma_cprimme(dummy_type_magma_cprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_cprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_magma_cprimme(dummy_type_magma_cprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_magma_cprimme *W,
      PRIMME_INT ldW, dummy_type_magma_cprimme *Q, PRIMME_INT ldQ, dummy_type_cprimme *R, int ldR,
      dummy_type_cprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
int matrixMatvec_magma_dprimme(dummy_type_magma_dprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_dprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_magma_dprimme(dummy_type_magma_dprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_dprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_magma_dprimme(dummy_type_magma_dprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_magma_dprimme *W,
      PRIMME_INT ldW, dummy_type_magma_dprimme *Q, PRIMME_INT ldQ, dummy_type_dprimme *R, int ldR,
      dummy_type_dprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
int matrixMatvec_magma_zprimme(dummy_type_magma_zprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_zprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_magma_zprimme(dummy_type_magma_zprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_zprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_magma_zprimme(dummy_type_magma_zprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_magma_zprimme *W,
      PRIMME_INT ldW, dummy_type_magma_zprimme *Q, PRIMME_INT ldQ, dummy_type_zprimme *R, int ldR,
      dummy_type_zprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
int matrixMatvec_magma_hprimme(dummy_type_magma_hprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_hprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_magma_hprimme(dummy_type_magma_hprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_hprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_magma_hprimme(dummy_type_magma_hprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_magma_hprimme *W,
      PRIMME_INT ldW, dummy_type_magma_hprimme *Q, PRIMME_INT ldQ, dummy_type_sprimme *R, int ldR,
      dummy_type_sprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
int matrixMatvec_magma_kprimme(dummy_type_magma_kprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_kprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_magma_kprimme(dummy_type_magma_kprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_kprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_magma_kprimme(dummy_type_magma_kprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_magma_kprimme *W,
      PRIMME_INT ldW, dummy_type_magma_kprimme *Q, PRIMME_INT ldQ, dummy_type_cprimme *R, int ldR,
      dummy_type_cprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
#endif
