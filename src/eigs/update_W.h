/*******************************************************************************
 * Copyright (c) 2018, College of William & Mary
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the College of William & Mary nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COLLEGE OF WILLIAM & MARY BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * PRIMME: https://github.com/primme/primme
 * Contact: Andreas Stathopoulos, a n d r e a s _at_ c s . w m . e d u
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef update_W_H
#define update_W_H
int matrixMatvec_hprimme(dummy_type_hprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_hprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_hprimme(dummy_type_hprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_hprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_hprimme(dummy_type_hprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_hprimme *W,
      PRIMME_INT ldW, dummy_type_hprimme *Q, PRIMME_INT ldQ, dummy_type_sprimme *R, int ldR,
      dummy_type_sprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
int matrixMatvec_kprimme(dummy_type_kprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_kprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_kprimme(dummy_type_kprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_kprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_kprimme(dummy_type_kprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_kprimme *W,
      PRIMME_INT ldW, dummy_type_kprimme *Q, PRIMME_INT ldQ, dummy_type_cprimme *R, int ldR,
      dummy_type_cprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
int matrixMatvec_sprimme(dummy_type_sprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_sprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_sprimme(dummy_type_sprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_sprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_sprimme(dummy_type_sprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_sprimme *W,
      PRIMME_INT ldW, dummy_type_sprimme *Q, PRIMME_INT ldQ, dummy_type_sprimme *R, int ldR,
      dummy_type_sprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
int matrixMatvec_cprimme(dummy_type_cprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_cprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_cprimme(dummy_type_cprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_cprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_cprimme(dummy_type_cprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_cprimme *W,
      PRIMME_INT ldW, dummy_type_cprimme *Q, PRIMME_INT ldQ, dummy_type_cprimme *R, int ldR,
      dummy_type_cprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_Sprimme)
#  define matrixMatvec_Sprimme CONCAT(matrixMatvec_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_Rprimme)
#  define matrixMatvec_Rprimme CONCAT(matrixMatvec_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_SHprimme)
#  define matrixMatvec_SHprimme CONCAT(matrixMatvec_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_RHprimme)
#  define matrixMatvec_RHprimme CONCAT(matrixMatvec_,HOST_REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_SXprimme)
#  define matrixMatvec_SXprimme CONCAT(matrixMatvec_,XSCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(matrixMatvec_RXprimme)
#  define matrixMatvec_RXprimme CONCAT(matrixMatvec_,XREAL_SUF)
#endif
int matrixMatvec_dprimme(dummy_type_dprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_dprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_Sprimme)
#  define massMatrixMatvec_Sprimme CONCAT(massMatrixMatvec_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_Rprimme)
#  define massMatrixMatvec_Rprimme CONCAT(massMatrixMatvec_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_SHprimme)
#  define massMatrixMatvec_SHprimme CONCAT(massMatrixMatvec_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_RHprimme)
#  define massMatrixMatvec_RHprimme CONCAT(massMatrixMatvec_,HOST_REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_SXprimme)
#  define massMatrixMatvec_SXprimme CONCAT(massMatrixMatvec_,XSCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(massMatrixMatvec_RXprimme)
#  define massMatrixMatvec_RXprimme CONCAT(massMatrixMatvec_,XREAL_SUF)
#endif
int massMatrixMatvec_dprimme(dummy_type_dprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_dprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_Sprimme)
#  define update_Q_Sprimme CONCAT(update_Q_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_Rprimme)
#  define update_Q_Rprimme CONCAT(update_Q_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_SHprimme)
#  define update_Q_SHprimme CONCAT(update_Q_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_RHprimme)
#  define update_Q_RHprimme CONCAT(update_Q_,HOST_REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_SXprimme)
#  define update_Q_SXprimme CONCAT(update_Q_,XSCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_Q_RXprimme)
#  define update_Q_RXprimme CONCAT(update_Q_,XREAL_SUF)
#endif
int update_Q_dprimme(dummy_type_dprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_dprimme *W,
      PRIMME_INT ldW, dummy_type_dprimme *Q, PRIMME_INT ldQ, dummy_type_dprimme *R, int ldR,
      dummy_type_dprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
int matrixMatvec_zprimme(dummy_type_zprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_zprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_zprimme(dummy_type_zprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_zprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_zprimme(dummy_type_zprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_zprimme *W,
      PRIMME_INT ldW, dummy_type_zprimme *Q, PRIMME_INT ldQ, dummy_type_zprimme *R, int ldR,
      dummy_type_zprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
int matrixMatvec_magma_sprimme(dummy_type_magma_sprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_sprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_magma_sprimme(dummy_type_magma_sprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_sprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_magma_sprimme(dummy_type_magma_sprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_magma_sprimme *W,
      PRIMME_INT ldW, dummy_type_magma_sprimme *Q, PRIMME_INT ldQ, dummy_type_sprimme *R, int ldR,
      dummy_type_sprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
int matrixMatvec_magma_cprimme(dummy_type_magma_cprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_cprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_magma_cprimme(dummy_type_magma_cprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_cprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_magma_cprimme(dummy_type_magma_cprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_magma_cprimme *W,
      PRIMME_INT ldW, dummy_type_magma_cprimme *Q, PRIMME_INT ldQ, dummy_type_cprimme *R, int ldR,
      dummy_type_cprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
int matrixMatvec_magma_dprimme(dummy_type_magma_dprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_dprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_magma_dprimme(dummy_type_magma_dprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_dprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_magma_dprimme(dummy_type_magma_dprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_magma_dprimme *W,
      PRIMME_INT ldW, dummy_type_magma_dprimme *Q, PRIMME_INT ldQ, dummy_type_dprimme *R, int ldR,
      dummy_type_dprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
int matrixMatvec_magma_zprimme(dummy_type_magma_zprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_zprimme *W, PRIMME_INT ldW, int basisSize, int blockSize,
      primme_context ctx);
int massMatrixMatvec_magma_zprimme(dummy_type_magma_zprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_zprimme *BV, PRIMME_INT ldBV, int basisSize, int blockSize,
      primme_context ctx);
int update_Q_magma_zprimme(dummy_type_magma_zprimme *BV, PRIMME_INT nLocal, PRIMME_INT ldBV, dummy_type_magma_zprimme *W,
      PRIMME_INT ldW, dummy_type_magma_zprimme *Q, PRIMME_INT ldQ, dummy_type_zprimme *R, int ldR,
      dummy_type_zprimme *QtQ, int ldQtQ, double targetShift, int basisSize,
      int blockSize, int *nQ, primme_context ctx);
#endif
