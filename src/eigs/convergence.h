/*******************************************************************************
 * Copyright (c) 2018, College of William & Mary
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the College of William & Mary nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COLLEGE OF WILLIAM & MARY BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * PRIMME: https://github.com/primme/primme
 * Contact: Andreas Stathopoulos, a n d r e a s _at_ c s . w m . e d u
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef convergence_H
#define convergence_H
int check_convergence_hprimme(dummy_type_hprimme *X, PRIMME_INT ldX, int givenX, dummy_type_hprimme *R,
      PRIMME_INT ldR, int givenR, dummy_type_hprimme *evecs, int numLocked,
      PRIMME_INT ldevecs, dummy_type_hprimme *Bevecs, PRIMME_INT ldBevecs, dummy_type_sprimme *VtBV,
      int ldVtBV, int left, int right, int *flags, dummy_type_sprimme *blockNorms,
      dummy_type_sprimme *hVals, int *reset, int practConvCheck, primme_context ctx);
int check_convergence_kprimme(dummy_type_kprimme *X, PRIMME_INT ldX, int givenX, dummy_type_kprimme *R,
      PRIMME_INT ldR, int givenR, dummy_type_kprimme *evecs, int numLocked,
      PRIMME_INT ldevecs, dummy_type_kprimme *Bevecs, PRIMME_INT ldBevecs, dummy_type_cprimme *VtBV,
      int ldVtBV, int left, int right, int *flags, dummy_type_sprimme *blockNorms,
      dummy_type_sprimme *hVals, int *reset, int practConvCheck, primme_context ctx);
int check_convergence_sprimme(dummy_type_sprimme *X, PRIMME_INT ldX, int givenX, dummy_type_sprimme *R,
      PRIMME_INT ldR, int givenR, dummy_type_sprimme *evecs, int numLocked,
      PRIMME_INT ldevecs, dummy_type_sprimme *Bevecs, PRIMME_INT ldBevecs, dummy_type_sprimme *VtBV,
      int ldVtBV, int left, int right, int *flags, dummy_type_sprimme *blockNorms,
      dummy_type_sprimme *hVals, int *reset, int practConvCheck, primme_context ctx);
int check_convergence_cprimme(dummy_type_cprimme *X, PRIMME_INT ldX, int givenX, dummy_type_cprimme *R,
      PRIMME_INT ldR, int givenR, dummy_type_cprimme *evecs, int numLocked,
      PRIMME_INT ldevecs, dummy_type_cprimme *Bevecs, PRIMME_INT ldBevecs, dummy_type_cprimme *VtBV,
      int ldVtBV, int left, int right, int *flags, dummy_type_sprimme *blockNorms,
      dummy_type_sprimme *hVals, int *reset, int practConvCheck, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(check_convergence_Sprimme)
#  define check_convergence_Sprimme CONCAT(check_convergence_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(check_convergence_Rprimme)
#  define check_convergence_Rprimme CONCAT(check_convergence_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(check_convergence_SHprimme)
#  define check_convergence_SHprimme CONCAT(check_convergence_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(check_convergence_RHprimme)
#  define check_convergence_RHprimme CONCAT(check_convergence_,HOST_REAL_SUF)
#endif
int check_convergence_dprimme(dummy_type_dprimme *X, PRIMME_INT ldX, int givenX, dummy_type_dprimme *R,
      PRIMME_INT ldR, int givenR, dummy_type_dprimme *evecs, int numLocked,
      PRIMME_INT ldevecs, dummy_type_dprimme *Bevecs, PRIMME_INT ldBevecs, dummy_type_dprimme *VtBV,
      int ldVtBV, int left, int right, int *flags, dummy_type_dprimme *blockNorms,
      dummy_type_dprimme *hVals, int *reset, int practConvCheck, primme_context ctx);
int check_convergence_zprimme(dummy_type_zprimme *X, PRIMME_INT ldX, int givenX, dummy_type_zprimme *R,
      PRIMME_INT ldR, int givenR, dummy_type_zprimme *evecs, int numLocked,
      PRIMME_INT ldevecs, dummy_type_zprimme *Bevecs, PRIMME_INT ldBevecs, dummy_type_zprimme *VtBV,
      int ldVtBV, int left, int right, int *flags, dummy_type_dprimme *blockNorms,
      dummy_type_dprimme *hVals, int *reset, int practConvCheck, primme_context ctx);
int check_convergence_magma_sprimme(dummy_type_magma_sprimme *X, PRIMME_INT ldX, int givenX, dummy_type_magma_sprimme *R,
      PRIMME_INT ldR, int givenR, dummy_type_magma_sprimme *evecs, int numLocked,
      PRIMME_INT ldevecs, dummy_type_magma_sprimme *Bevecs, PRIMME_INT ldBevecs, dummy_type_sprimme *VtBV,
      int ldVtBV, int left, int right, int *flags, dummy_type_sprimme *blockNorms,
      dummy_type_sprimme *hVals, int *reset, int practConvCheck, primme_context ctx);
int check_convergence_magma_cprimme(dummy_type_magma_cprimme *X, PRIMME_INT ldX, int givenX, dummy_type_magma_cprimme *R,
      PRIMME_INT ldR, int givenR, dummy_type_magma_cprimme *evecs, int numLocked,
      PRIMME_INT ldevecs, dummy_type_magma_cprimme *Bevecs, PRIMME_INT ldBevecs, dummy_type_cprimme *VtBV,
      int ldVtBV, int left, int right, int *flags, dummy_type_sprimme *blockNorms,
      dummy_type_sprimme *hVals, int *reset, int practConvCheck, primme_context ctx);
int check_convergence_magma_dprimme(dummy_type_magma_dprimme *X, PRIMME_INT ldX, int givenX, dummy_type_magma_dprimme *R,
      PRIMME_INT ldR, int givenR, dummy_type_magma_dprimme *evecs, int numLocked,
      PRIMME_INT ldevecs, dummy_type_magma_dprimme *Bevecs, PRIMME_INT ldBevecs, dummy_type_dprimme *VtBV,
      int ldVtBV, int left, int right, int *flags, dummy_type_dprimme *blockNorms,
      dummy_type_dprimme *hVals, int *reset, int practConvCheck, primme_context ctx);
int check_convergence_magma_zprimme(dummy_type_magma_zprimme *X, PRIMME_INT ldX, int givenX, dummy_type_magma_zprimme *R,
      PRIMME_INT ldR, int givenR, dummy_type_magma_zprimme *evecs, int numLocked,
      PRIMME_INT ldevecs, dummy_type_magma_zprimme *Bevecs, PRIMME_INT ldBevecs, dummy_type_zprimme *VtBV,
      int ldVtBV, int left, int right, int *flags, dummy_type_dprimme *blockNorms,
      dummy_type_dprimme *hVals, int *reset, int practConvCheck, primme_context ctx);
#endif
