/*******************************************************************************
 * Copyright (c) 2018, College of William & Mary
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the College of William & Mary nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COLLEGE OF WILLIAM & MARY BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * PRIMME: https://github.com/primme/primme
 * Contact: Andreas Stathopoulos, a n d r e a s _at_ c s . w m . e d u
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef inner_solve_H
#define inner_solve_H
int inner_solve_sprimme(int blockSize, float *x, PRIMME_INT ldx, float *Bx,
      PRIMME_INT ldBx, float *r, PRIMME_INT ldr, float *rnorm, float *evecs,
      PRIMME_INT ldevecs, float *Mfact, int *ipivot, float *xKinvBx,
      float *LprojectorQ, PRIMME_INT ldLprojectorQ, float *LprojectorX,
      PRIMME_INT ldLprojectorX, float *LprojectorBQ, PRIMME_INT ldLprojectorBQ,
      float *LprojectorBX, PRIMME_INT ldLprojectorBX, float *RprojectorQ,
      PRIMME_INT ldRprojectorQ, float *RprojectorX, PRIMME_INT ldRprojectorX,
      int sizeLprojectorQ, int sizeLprojectorX, int sizeRprojectorQ,
      int sizeRprojectorX, float *sol, PRIMME_INT ldsol, float *eval,
      double *shift, int *touch, double startTime, primme_context ctx);
int inner_solve_cprimme(int blockSize, PRIMME_COMPLEX_FLOAT *x, PRIMME_INT ldx, PRIMME_COMPLEX_FLOAT *Bx,
      PRIMME_INT ldBx, PRIMME_COMPLEX_FLOAT *r, PRIMME_INT ldr, float *rnorm, PRIMME_COMPLEX_FLOAT *evecs,
      PRIMME_INT ldevecs, PRIMME_COMPLEX_FLOAT *Mfact, int *ipivot, PRIMME_COMPLEX_FLOAT *xKinvBx,
      PRIMME_COMPLEX_FLOAT *LprojectorQ, PRIMME_INT ldLprojectorQ, PRIMME_COMPLEX_FLOAT *LprojectorX,
      PRIMME_INT ldLprojectorX, PRIMME_COMPLEX_FLOAT *LprojectorBQ, PRIMME_INT ldLprojectorBQ,
      PRIMME_COMPLEX_FLOAT *LprojectorBX, PRIMME_INT ldLprojectorBX, PRIMME_COMPLEX_FLOAT *RprojectorQ,
      PRIMME_INT ldRprojectorQ, PRIMME_COMPLEX_FLOAT *RprojectorX, PRIMME_INT ldRprojectorX,
      int sizeLprojectorQ, int sizeLprojectorX, int sizeRprojectorQ,
      int sizeRprojectorX, PRIMME_COMPLEX_FLOAT *sol, PRIMME_INT ldsol, float *eval,
      double *shift, int *touch, double startTime, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(inner_solve_Sprimme)
#  define inner_solve_Sprimme CONCAT(inner_solve_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(inner_solve_Rprimme)
#  define inner_solve_Rprimme CONCAT(inner_solve_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(inner_solve_SHprimme)
#  define inner_solve_SHprimme CONCAT(inner_solve_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(inner_solve_RHprimme)
#  define inner_solve_RHprimme CONCAT(inner_solve_,HOST_REAL_SUF)
#endif
int inner_solve_dprimme(int blockSize, double *x, PRIMME_INT ldx, double *Bx,
      PRIMME_INT ldBx, double *r, PRIMME_INT ldr, double *rnorm, double *evecs,
      PRIMME_INT ldevecs, double *Mfact, int *ipivot, double *xKinvBx,
      double *LprojectorQ, PRIMME_INT ldLprojectorQ, double *LprojectorX,
      PRIMME_INT ldLprojectorX, double *LprojectorBQ, PRIMME_INT ldLprojectorBQ,
      double *LprojectorBX, PRIMME_INT ldLprojectorBX, double *RprojectorQ,
      PRIMME_INT ldRprojectorQ, double *RprojectorX, PRIMME_INT ldRprojectorX,
      int sizeLprojectorQ, int sizeLprojectorX, int sizeRprojectorQ,
      int sizeRprojectorX, double *sol, PRIMME_INT ldsol, double *eval,
      double *shift, int *touch, double startTime, primme_context ctx);
int inner_solve_zprimme(int blockSize, PRIMME_COMPLEX_DOUBLE *x, PRIMME_INT ldx, PRIMME_COMPLEX_DOUBLE *Bx,
      PRIMME_INT ldBx, PRIMME_COMPLEX_DOUBLE *r, PRIMME_INT ldr, double *rnorm, PRIMME_COMPLEX_DOUBLE *evecs,
      PRIMME_INT ldevecs, PRIMME_COMPLEX_DOUBLE *Mfact, int *ipivot, PRIMME_COMPLEX_DOUBLE *xKinvBx,
      PRIMME_COMPLEX_DOUBLE *LprojectorQ, PRIMME_INT ldLprojectorQ, PRIMME_COMPLEX_DOUBLE *LprojectorX,
      PRIMME_INT ldLprojectorX, PRIMME_COMPLEX_DOUBLE *LprojectorBQ, PRIMME_INT ldLprojectorBQ,
      PRIMME_COMPLEX_DOUBLE *LprojectorBX, PRIMME_INT ldLprojectorBX, PRIMME_COMPLEX_DOUBLE *RprojectorQ,
      PRIMME_INT ldRprojectorQ, PRIMME_COMPLEX_DOUBLE *RprojectorX, PRIMME_INT ldRprojectorX,
      int sizeLprojectorQ, int sizeLprojectorX, int sizeRprojectorQ,
      int sizeRprojectorX, PRIMME_COMPLEX_DOUBLE *sol, PRIMME_INT ldsol, double *eval,
      double *shift, int *touch, double startTime, primme_context ctx);
int inner_solve_smagmaprimme(int blockSize, magma_float *x, PRIMME_INT ldx, magma_float *Bx,
      PRIMME_INT ldBx, magma_float *r, PRIMME_INT ldr, float *rnorm, magma_float *evecs,
      PRIMME_INT ldevecs, float *Mfact, int *ipivot, float *xKinvBx,
      magma_float *LprojectorQ, PRIMME_INT ldLprojectorQ, magma_float *LprojectorX,
      PRIMME_INT ldLprojectorX, magma_float *LprojectorBQ, PRIMME_INT ldLprojectorBQ,
      magma_float *LprojectorBX, PRIMME_INT ldLprojectorBX, magma_float *RprojectorQ,
      PRIMME_INT ldRprojectorQ, magma_float *RprojectorX, PRIMME_INT ldRprojectorX,
      int sizeLprojectorQ, int sizeLprojectorX, int sizeRprojectorQ,
      int sizeRprojectorX, magma_float *sol, PRIMME_INT ldsol, float *eval,
      double *shift, int *touch, double startTime, primme_context ctx);
int inner_solve_cmagmaprimme(int blockSize, magma_complex_float *x, PRIMME_INT ldx, magma_complex_float *Bx,
      PRIMME_INT ldBx, magma_complex_float *r, PRIMME_INT ldr, float *rnorm, magma_complex_float *evecs,
      PRIMME_INT ldevecs, PRIMME_COMPLEX_FLOAT *Mfact, int *ipivot, PRIMME_COMPLEX_FLOAT *xKinvBx,
      magma_complex_float *LprojectorQ, PRIMME_INT ldLprojectorQ, magma_complex_float *LprojectorX,
      PRIMME_INT ldLprojectorX, magma_complex_float *LprojectorBQ, PRIMME_INT ldLprojectorBQ,
      magma_complex_float *LprojectorBX, PRIMME_INT ldLprojectorBX, magma_complex_float *RprojectorQ,
      PRIMME_INT ldRprojectorQ, magma_complex_float *RprojectorX, PRIMME_INT ldRprojectorX,
      int sizeLprojectorQ, int sizeLprojectorX, int sizeRprojectorQ,
      int sizeRprojectorX, magma_complex_float *sol, PRIMME_INT ldsol, float *eval,
      double *shift, int *touch, double startTime, primme_context ctx);
int inner_solve_dmagmaprimme(int blockSize, magma_double *x, PRIMME_INT ldx, magma_double *Bx,
      PRIMME_INT ldBx, magma_double *r, PRIMME_INT ldr, double *rnorm, magma_double *evecs,
      PRIMME_INT ldevecs, double *Mfact, int *ipivot, double *xKinvBx,
      magma_double *LprojectorQ, PRIMME_INT ldLprojectorQ, magma_double *LprojectorX,
      PRIMME_INT ldLprojectorX, magma_double *LprojectorBQ, PRIMME_INT ldLprojectorBQ,
      magma_double *LprojectorBX, PRIMME_INT ldLprojectorBX, magma_double *RprojectorQ,
      PRIMME_INT ldRprojectorQ, magma_double *RprojectorX, PRIMME_INT ldRprojectorX,
      int sizeLprojectorQ, int sizeLprojectorX, int sizeRprojectorQ,
      int sizeRprojectorX, magma_double *sol, PRIMME_INT ldsol, double *eval,
      double *shift, int *touch, double startTime, primme_context ctx);
int inner_solve_zmagmaprimme(int blockSize, magma_complex_double *x, PRIMME_INT ldx, magma_complex_double *Bx,
      PRIMME_INT ldBx, magma_complex_double *r, PRIMME_INT ldr, double *rnorm, magma_complex_double *evecs,
      PRIMME_INT ldevecs, PRIMME_COMPLEX_DOUBLE *Mfact, int *ipivot, PRIMME_COMPLEX_DOUBLE *xKinvBx,
      magma_complex_double *LprojectorQ, PRIMME_INT ldLprojectorQ, magma_complex_double *LprojectorX,
      PRIMME_INT ldLprojectorX, magma_complex_double *LprojectorBQ, PRIMME_INT ldLprojectorBQ,
      magma_complex_double *LprojectorBX, PRIMME_INT ldLprojectorBX, magma_complex_double *RprojectorQ,
      PRIMME_INT ldRprojectorQ, magma_complex_double *RprojectorX, PRIMME_INT ldRprojectorX,
      int sizeLprojectorQ, int sizeLprojectorX, int sizeRprojectorQ,
      int sizeRprojectorX, magma_complex_double *sol, PRIMME_INT ldsol, double *eval,
      double *shift, int *touch, double startTime, primme_context ctx);
#endif
