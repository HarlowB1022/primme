/*******************************************************************************
 * Copyright (c) 2018, College of William & Mary
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the College of William & Mary nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COLLEGE OF WILLIAM & MARY BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * PRIMME: https://github.com/primme/primme
 * Contact: Andreas Stathopoulos, a n d r e a s _at_ c s . w m . e d u
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef inner_solve_H
#define inner_solve_H
int inner_solve_hprimme(int blockSize, dummy_type_hprimme *x, PRIMME_INT ldx, dummy_type_hprimme *Bx,
      PRIMME_INT ldBx, dummy_type_hprimme *r, PRIMME_INT ldr, dummy_type_sprimme *rnorm, dummy_type_hprimme *evecs,
      PRIMME_INT ldevecs, dummy_type_sprimme *Mfact, int *ipivot, dummy_type_sprimme *xKinvBx,
      dummy_type_hprimme *LprojectorQ, PRIMME_INT ldLprojectorQ, dummy_type_hprimme *LprojectorX,
      PRIMME_INT ldLprojectorX, dummy_type_hprimme *LprojectorBQ, PRIMME_INT ldLprojectorBQ,
      dummy_type_hprimme *LprojectorBX, PRIMME_INT ldLprojectorBX, dummy_type_hprimme *RprojectorQ,
      PRIMME_INT ldRprojectorQ, dummy_type_hprimme *RprojectorX, PRIMME_INT ldRprojectorX,
      int sizeLprojectorQ, int sizeLprojectorX, int sizeRprojectorQ,
      int sizeRprojectorX, dummy_type_hprimme *sol, PRIMME_INT ldsol, dummy_type_sprimme *eval,
      double *shift, int *touch, double startTime, primme_context ctx);
int inner_solve_kprimme(int blockSize, dummy_type_kprimme *x, PRIMME_INT ldx, dummy_type_kprimme *Bx,
      PRIMME_INT ldBx, dummy_type_kprimme *r, PRIMME_INT ldr, dummy_type_sprimme *rnorm, dummy_type_kprimme *evecs,
      PRIMME_INT ldevecs, dummy_type_cprimme *Mfact, int *ipivot, dummy_type_cprimme *xKinvBx,
      dummy_type_kprimme *LprojectorQ, PRIMME_INT ldLprojectorQ, dummy_type_kprimme *LprojectorX,
      PRIMME_INT ldLprojectorX, dummy_type_kprimme *LprojectorBQ, PRIMME_INT ldLprojectorBQ,
      dummy_type_kprimme *LprojectorBX, PRIMME_INT ldLprojectorBX, dummy_type_kprimme *RprojectorQ,
      PRIMME_INT ldRprojectorQ, dummy_type_kprimme *RprojectorX, PRIMME_INT ldRprojectorX,
      int sizeLprojectorQ, int sizeLprojectorX, int sizeRprojectorQ,
      int sizeRprojectorX, dummy_type_kprimme *sol, PRIMME_INT ldsol, dummy_type_sprimme *eval,
      double *shift, int *touch, double startTime, primme_context ctx);
int inner_solve_sprimme(int blockSize, dummy_type_sprimme *x, PRIMME_INT ldx, dummy_type_sprimme *Bx,
      PRIMME_INT ldBx, dummy_type_sprimme *r, PRIMME_INT ldr, dummy_type_sprimme *rnorm, dummy_type_sprimme *evecs,
      PRIMME_INT ldevecs, dummy_type_sprimme *Mfact, int *ipivot, dummy_type_sprimme *xKinvBx,
      dummy_type_sprimme *LprojectorQ, PRIMME_INT ldLprojectorQ, dummy_type_sprimme *LprojectorX,
      PRIMME_INT ldLprojectorX, dummy_type_sprimme *LprojectorBQ, PRIMME_INT ldLprojectorBQ,
      dummy_type_sprimme *LprojectorBX, PRIMME_INT ldLprojectorBX, dummy_type_sprimme *RprojectorQ,
      PRIMME_INT ldRprojectorQ, dummy_type_sprimme *RprojectorX, PRIMME_INT ldRprojectorX,
      int sizeLprojectorQ, int sizeLprojectorX, int sizeRprojectorQ,
      int sizeRprojectorX, dummy_type_sprimme *sol, PRIMME_INT ldsol, dummy_type_sprimme *eval,
      double *shift, int *touch, double startTime, primme_context ctx);
int inner_solve_cprimme(int blockSize, dummy_type_cprimme *x, PRIMME_INT ldx, dummy_type_cprimme *Bx,
      PRIMME_INT ldBx, dummy_type_cprimme *r, PRIMME_INT ldr, dummy_type_sprimme *rnorm, dummy_type_cprimme *evecs,
      PRIMME_INT ldevecs, dummy_type_cprimme *Mfact, int *ipivot, dummy_type_cprimme *xKinvBx,
      dummy_type_cprimme *LprojectorQ, PRIMME_INT ldLprojectorQ, dummy_type_cprimme *LprojectorX,
      PRIMME_INT ldLprojectorX, dummy_type_cprimme *LprojectorBQ, PRIMME_INT ldLprojectorBQ,
      dummy_type_cprimme *LprojectorBX, PRIMME_INT ldLprojectorBX, dummy_type_cprimme *RprojectorQ,
      PRIMME_INT ldRprojectorQ, dummy_type_cprimme *RprojectorX, PRIMME_INT ldRprojectorX,
      int sizeLprojectorQ, int sizeLprojectorX, int sizeRprojectorQ,
      int sizeRprojectorX, dummy_type_cprimme *sol, PRIMME_INT ldsol, dummy_type_sprimme *eval,
      double *shift, int *touch, double startTime, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(inner_solve_Sprimme)
#  define inner_solve_Sprimme CONCAT(inner_solve_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(inner_solve_Rprimme)
#  define inner_solve_Rprimme CONCAT(inner_solve_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(inner_solve_SHprimme)
#  define inner_solve_SHprimme CONCAT(inner_solve_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(inner_solve_RHprimme)
#  define inner_solve_RHprimme CONCAT(inner_solve_,HOST_REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(inner_solve_SXprimme)
#  define inner_solve_SXprimme CONCAT(inner_solve_,XSCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(inner_solve_RXprimme)
#  define inner_solve_RXprimme CONCAT(inner_solve_,XREAL_SUF)
#endif
int inner_solve_dprimme(int blockSize, dummy_type_dprimme *x, PRIMME_INT ldx, dummy_type_dprimme *Bx,
      PRIMME_INT ldBx, dummy_type_dprimme *r, PRIMME_INT ldr, dummy_type_dprimme *rnorm, dummy_type_dprimme *evecs,
      PRIMME_INT ldevecs, dummy_type_dprimme *Mfact, int *ipivot, dummy_type_dprimme *xKinvBx,
      dummy_type_dprimme *LprojectorQ, PRIMME_INT ldLprojectorQ, dummy_type_dprimme *LprojectorX,
      PRIMME_INT ldLprojectorX, dummy_type_dprimme *LprojectorBQ, PRIMME_INT ldLprojectorBQ,
      dummy_type_dprimme *LprojectorBX, PRIMME_INT ldLprojectorBX, dummy_type_dprimme *RprojectorQ,
      PRIMME_INT ldRprojectorQ, dummy_type_dprimme *RprojectorX, PRIMME_INT ldRprojectorX,
      int sizeLprojectorQ, int sizeLprojectorX, int sizeRprojectorQ,
      int sizeRprojectorX, dummy_type_dprimme *sol, PRIMME_INT ldsol, dummy_type_dprimme *eval,
      double *shift, int *touch, double startTime, primme_context ctx);
int inner_solve_zprimme(int blockSize, dummy_type_zprimme *x, PRIMME_INT ldx, dummy_type_zprimme *Bx,
      PRIMME_INT ldBx, dummy_type_zprimme *r, PRIMME_INT ldr, dummy_type_dprimme *rnorm, dummy_type_zprimme *evecs,
      PRIMME_INT ldevecs, dummy_type_zprimme *Mfact, int *ipivot, dummy_type_zprimme *xKinvBx,
      dummy_type_zprimme *LprojectorQ, PRIMME_INT ldLprojectorQ, dummy_type_zprimme *LprojectorX,
      PRIMME_INT ldLprojectorX, dummy_type_zprimme *LprojectorBQ, PRIMME_INT ldLprojectorBQ,
      dummy_type_zprimme *LprojectorBX, PRIMME_INT ldLprojectorBX, dummy_type_zprimme *RprojectorQ,
      PRIMME_INT ldRprojectorQ, dummy_type_zprimme *RprojectorX, PRIMME_INT ldRprojectorX,
      int sizeLprojectorQ, int sizeLprojectorX, int sizeRprojectorQ,
      int sizeRprojectorX, dummy_type_zprimme *sol, PRIMME_INT ldsol, dummy_type_dprimme *eval,
      double *shift, int *touch, double startTime, primme_context ctx);
int inner_solve_magma_sprimme(int blockSize, dummy_type_magma_sprimme *x, PRIMME_INT ldx, dummy_type_magma_sprimme *Bx,
      PRIMME_INT ldBx, dummy_type_magma_sprimme *r, PRIMME_INT ldr, dummy_type_sprimme *rnorm, dummy_type_magma_sprimme *evecs,
      PRIMME_INT ldevecs, dummy_type_sprimme *Mfact, int *ipivot, dummy_type_sprimme *xKinvBx,
      dummy_type_magma_sprimme *LprojectorQ, PRIMME_INT ldLprojectorQ, dummy_type_magma_sprimme *LprojectorX,
      PRIMME_INT ldLprojectorX, dummy_type_magma_sprimme *LprojectorBQ, PRIMME_INT ldLprojectorBQ,
      dummy_type_magma_sprimme *LprojectorBX, PRIMME_INT ldLprojectorBX, dummy_type_magma_sprimme *RprojectorQ,
      PRIMME_INT ldRprojectorQ, dummy_type_magma_sprimme *RprojectorX, PRIMME_INT ldRprojectorX,
      int sizeLprojectorQ, int sizeLprojectorX, int sizeRprojectorQ,
      int sizeRprojectorX, dummy_type_magma_sprimme *sol, PRIMME_INT ldsol, dummy_type_sprimme *eval,
      double *shift, int *touch, double startTime, primme_context ctx);
int inner_solve_magma_cprimme(int blockSize, dummy_type_magma_cprimme *x, PRIMME_INT ldx, dummy_type_magma_cprimme *Bx,
      PRIMME_INT ldBx, dummy_type_magma_cprimme *r, PRIMME_INT ldr, dummy_type_sprimme *rnorm, dummy_type_magma_cprimme *evecs,
      PRIMME_INT ldevecs, dummy_type_cprimme *Mfact, int *ipivot, dummy_type_cprimme *xKinvBx,
      dummy_type_magma_cprimme *LprojectorQ, PRIMME_INT ldLprojectorQ, dummy_type_magma_cprimme *LprojectorX,
      PRIMME_INT ldLprojectorX, dummy_type_magma_cprimme *LprojectorBQ, PRIMME_INT ldLprojectorBQ,
      dummy_type_magma_cprimme *LprojectorBX, PRIMME_INT ldLprojectorBX, dummy_type_magma_cprimme *RprojectorQ,
      PRIMME_INT ldRprojectorQ, dummy_type_magma_cprimme *RprojectorX, PRIMME_INT ldRprojectorX,
      int sizeLprojectorQ, int sizeLprojectorX, int sizeRprojectorQ,
      int sizeRprojectorX, dummy_type_magma_cprimme *sol, PRIMME_INT ldsol, dummy_type_sprimme *eval,
      double *shift, int *touch, double startTime, primme_context ctx);
int inner_solve_magma_dprimme(int blockSize, dummy_type_magma_dprimme *x, PRIMME_INT ldx, dummy_type_magma_dprimme *Bx,
      PRIMME_INT ldBx, dummy_type_magma_dprimme *r, PRIMME_INT ldr, dummy_type_dprimme *rnorm, dummy_type_magma_dprimme *evecs,
      PRIMME_INT ldevecs, dummy_type_dprimme *Mfact, int *ipivot, dummy_type_dprimme *xKinvBx,
      dummy_type_magma_dprimme *LprojectorQ, PRIMME_INT ldLprojectorQ, dummy_type_magma_dprimme *LprojectorX,
      PRIMME_INT ldLprojectorX, dummy_type_magma_dprimme *LprojectorBQ, PRIMME_INT ldLprojectorBQ,
      dummy_type_magma_dprimme *LprojectorBX, PRIMME_INT ldLprojectorBX, dummy_type_magma_dprimme *RprojectorQ,
      PRIMME_INT ldRprojectorQ, dummy_type_magma_dprimme *RprojectorX, PRIMME_INT ldRprojectorX,
      int sizeLprojectorQ, int sizeLprojectorX, int sizeRprojectorQ,
      int sizeRprojectorX, dummy_type_magma_dprimme *sol, PRIMME_INT ldsol, dummy_type_dprimme *eval,
      double *shift, int *touch, double startTime, primme_context ctx);
int inner_solve_magma_zprimme(int blockSize, dummy_type_magma_zprimme *x, PRIMME_INT ldx, dummy_type_magma_zprimme *Bx,
      PRIMME_INT ldBx, dummy_type_magma_zprimme *r, PRIMME_INT ldr, dummy_type_dprimme *rnorm, dummy_type_magma_zprimme *evecs,
      PRIMME_INT ldevecs, dummy_type_zprimme *Mfact, int *ipivot, dummy_type_zprimme *xKinvBx,
      dummy_type_magma_zprimme *LprojectorQ, PRIMME_INT ldLprojectorQ, dummy_type_magma_zprimme *LprojectorX,
      PRIMME_INT ldLprojectorX, dummy_type_magma_zprimme *LprojectorBQ, PRIMME_INT ldLprojectorBQ,
      dummy_type_magma_zprimme *LprojectorBX, PRIMME_INT ldLprojectorBX, dummy_type_magma_zprimme *RprojectorQ,
      PRIMME_INT ldRprojectorQ, dummy_type_magma_zprimme *RprojectorX, PRIMME_INT ldRprojectorX,
      int sizeLprojectorQ, int sizeLprojectorX, int sizeRprojectorQ,
      int sizeRprojectorX, dummy_type_magma_zprimme *sol, PRIMME_INT ldsol, dummy_type_dprimme *eval,
      double *shift, int *touch, double startTime, primme_context ctx);
#endif
