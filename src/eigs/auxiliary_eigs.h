/*******************************************************************************
 * Copyright (c) 2018, College of William & Mary
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the College of William & Mary nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COLLEGE OF WILLIAM & MARY BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * PRIMME: https://github.com/primme/primme
 * Contact: Andreas Stathopoulos, a n d r e a s _at_ c s . w m . e d u
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef auxiliary_eigs_H
#define auxiliary_eigs_H
void Num_compute_residual_hprimme(PRIMME_INT n, dummy_type_sprimme eval, dummy_type_hprimme *Bx,
   dummy_type_hprimme *Ax, dummy_type_hprimme *r, primme_context ctx);
int Num_update_VWXR_hprimme(dummy_type_hprimme *V, dummy_type_hprimme *W, dummy_type_hprimme *BV, PRIMME_INT mV,
      int nV, PRIMME_INT ldV, dummy_type_sprimme *h, int nh, int ldh, dummy_type_sprimme *hVals,
      dummy_type_hprimme *X0, int nX0b, int nX0e, PRIMME_INT ldX0,
      dummy_type_hprimme *X1, int nX1b, int nX1e, PRIMME_INT ldX1,
      dummy_type_hprimme *X2, int nX2b, int nX2e, PRIMME_INT ldX2,
      dummy_type_hprimme *Wo, int nWob, int nWoe, PRIMME_INT ldWo,
      dummy_type_hprimme *R, int nRb, int nRe, PRIMME_INT ldR, dummy_type_sprimme *Rnorms,
      dummy_type_hprimme *BX0, int nBX0b, int nBX0e, PRIMME_INT ldBX0,
      dummy_type_hprimme *BX1, int nBX1b, int nBX1e, PRIMME_INT ldBX1,
      dummy_type_hprimme *BX2, int nBX2b, int nBX2e, PRIMME_INT ldBX2,
      dummy_type_sprimme *rnorms, int nrb, int nre,
      dummy_type_sprimme *G, int nG, int ldG,
      dummy_type_sprimme *H, int nH, int ldH,
      dummy_type_sprimme *xnorms, int nxb, int nxe,
      primme_context ctx);
int applyPreconditioner_hprimme(dummy_type_hprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_hprimme *W, PRIMME_INT ldW, int blockSize, primme_context ctx);
int convTestFun_hprimme(dummy_type_sprimme eval, dummy_type_hprimme *evec, int givenEvec, dummy_type_sprimme rNorm,
      int *isconv, primme_context ctx);
int globalSum_hprimme(dummy_type_hprimme *sendBuf, dummy_type_hprimme *recvBuf, int count,
   primme_context ctx);
dummy_type_sprimme problemNorm_hprimme(
      int overrideUserEstimations, struct primme_params *primme);
dummy_type_sprimme deltaEig_hprimme(
      int overrideUserEstimations, struct primme_params *primme);
int Num_dist_dots_hprimme(dummy_type_hprimme *x, PRIMME_INT ldx, dummy_type_hprimme *y, PRIMME_INT ldy,
      PRIMME_INT m, int n, dummy_type_sprimme *result, primme_context ctx);
int Num_dist_dots_real_hprimme(dummy_type_hprimme *x, PRIMME_INT ldx, dummy_type_hprimme *y,
      PRIMME_INT ldy, PRIMME_INT m, int n, dummy_type_sprimme *result, primme_context ctx);
int monitorFun_hprimme(dummy_type_sprimme *basisEvals, int basisSize, int *basisFlags,
      int *iblock, int blockSize, dummy_type_sprimme *basisNorms, int numConverged,
      dummy_type_sprimme *lockedEvals, int numLocked, int *lockedFlags, dummy_type_sprimme *lockedNorms,
      int inner_its, dummy_type_sprimme LSRes, const char *msg, double time,
      primme_event event, double startTime, primme_context ctx);
void Num_compute_residual_kprimme(PRIMME_INT n, dummy_type_cprimme eval, dummy_type_kprimme *Bx,
   dummy_type_kprimme *Ax, dummy_type_kprimme *r, primme_context ctx);
int Num_update_VWXR_kprimme(dummy_type_kprimme *V, dummy_type_kprimme *W, dummy_type_kprimme *BV, PRIMME_INT mV,
      int nV, PRIMME_INT ldV, dummy_type_cprimme *h, int nh, int ldh, dummy_type_sprimme *hVals,
      dummy_type_kprimme *X0, int nX0b, int nX0e, PRIMME_INT ldX0,
      dummy_type_kprimme *X1, int nX1b, int nX1e, PRIMME_INT ldX1,
      dummy_type_kprimme *X2, int nX2b, int nX2e, PRIMME_INT ldX2,
      dummy_type_kprimme *Wo, int nWob, int nWoe, PRIMME_INT ldWo,
      dummy_type_kprimme *R, int nRb, int nRe, PRIMME_INT ldR, dummy_type_sprimme *Rnorms,
      dummy_type_kprimme *BX0, int nBX0b, int nBX0e, PRIMME_INT ldBX0,
      dummy_type_kprimme *BX1, int nBX1b, int nBX1e, PRIMME_INT ldBX1,
      dummy_type_kprimme *BX2, int nBX2b, int nBX2e, PRIMME_INT ldBX2,
      dummy_type_sprimme *rnorms, int nrb, int nre,
      dummy_type_cprimme *G, int nG, int ldG,
      dummy_type_cprimme *H, int nH, int ldH,
      dummy_type_sprimme *xnorms, int nxb, int nxe,
      primme_context ctx);
int applyPreconditioner_kprimme(dummy_type_kprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_kprimme *W, PRIMME_INT ldW, int blockSize, primme_context ctx);
int convTestFun_kprimme(dummy_type_sprimme eval, dummy_type_kprimme *evec, int givenEvec, dummy_type_sprimme rNorm,
      int *isconv, primme_context ctx);
int globalSum_kprimme(dummy_type_kprimme *sendBuf, dummy_type_kprimme *recvBuf, int count,
   primme_context ctx);
dummy_type_sprimme problemNorm_kprimme(
      int overrideUserEstimations, struct primme_params *primme);
dummy_type_sprimme deltaEig_kprimme(
      int overrideUserEstimations, struct primme_params *primme);
int Num_dist_dots_kprimme(dummy_type_kprimme *x, PRIMME_INT ldx, dummy_type_kprimme *y, PRIMME_INT ldy,
      PRIMME_INT m, int n, dummy_type_cprimme *result, primme_context ctx);
int Num_dist_dots_real_kprimme(dummy_type_kprimme *x, PRIMME_INT ldx, dummy_type_kprimme *y,
      PRIMME_INT ldy, PRIMME_INT m, int n, dummy_type_sprimme *result, primme_context ctx);
int monitorFun_kprimme(dummy_type_sprimme *basisEvals, int basisSize, int *basisFlags,
      int *iblock, int blockSize, dummy_type_sprimme *basisNorms, int numConverged,
      dummy_type_sprimme *lockedEvals, int numLocked, int *lockedFlags, dummy_type_sprimme *lockedNorms,
      int inner_its, dummy_type_sprimme LSRes, const char *msg, double time,
      primme_event event, double startTime, primme_context ctx);
void Num_compute_residual_sprimme(PRIMME_INT n, dummy_type_sprimme eval, dummy_type_sprimme *Bx,
   dummy_type_sprimme *Ax, dummy_type_sprimme *r, primme_context ctx);
int Num_update_VWXR_sprimme(dummy_type_sprimme *V, dummy_type_sprimme *W, dummy_type_sprimme *BV, PRIMME_INT mV,
      int nV, PRIMME_INT ldV, dummy_type_sprimme *h, int nh, int ldh, dummy_type_sprimme *hVals,
      dummy_type_sprimme *X0, int nX0b, int nX0e, PRIMME_INT ldX0,
      dummy_type_sprimme *X1, int nX1b, int nX1e, PRIMME_INT ldX1,
      dummy_type_sprimme *X2, int nX2b, int nX2e, PRIMME_INT ldX2,
      dummy_type_sprimme *Wo, int nWob, int nWoe, PRIMME_INT ldWo,
      dummy_type_sprimme *R, int nRb, int nRe, PRIMME_INT ldR, dummy_type_sprimme *Rnorms,
      dummy_type_sprimme *BX0, int nBX0b, int nBX0e, PRIMME_INT ldBX0,
      dummy_type_sprimme *BX1, int nBX1b, int nBX1e, PRIMME_INT ldBX1,
      dummy_type_sprimme *BX2, int nBX2b, int nBX2e, PRIMME_INT ldBX2,
      dummy_type_sprimme *rnorms, int nrb, int nre,
      dummy_type_sprimme *G, int nG, int ldG,
      dummy_type_sprimme *H, int nH, int ldH,
      dummy_type_sprimme *xnorms, int nxb, int nxe,
      primme_context ctx);
int applyPreconditioner_sprimme(dummy_type_sprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_sprimme *W, PRIMME_INT ldW, int blockSize, primme_context ctx);
int convTestFun_sprimme(dummy_type_sprimme eval, dummy_type_sprimme *evec, int givenEvec, dummy_type_sprimme rNorm,
      int *isconv, primme_context ctx);
int globalSum_sprimme(dummy_type_sprimme *sendBuf, dummy_type_sprimme *recvBuf, int count,
   primme_context ctx);
dummy_type_sprimme problemNorm_sprimme(
      int overrideUserEstimations, struct primme_params *primme);
dummy_type_sprimme deltaEig_sprimme(
      int overrideUserEstimations, struct primme_params *primme);
int Num_dist_dots_sprimme(dummy_type_sprimme *x, PRIMME_INT ldx, dummy_type_sprimme *y, PRIMME_INT ldy,
      PRIMME_INT m, int n, dummy_type_sprimme *result, primme_context ctx);
int Num_dist_dots_real_sprimme(dummy_type_sprimme *x, PRIMME_INT ldx, dummy_type_sprimme *y,
      PRIMME_INT ldy, PRIMME_INT m, int n, dummy_type_sprimme *result, primme_context ctx);
int monitorFun_sprimme(dummy_type_sprimme *basisEvals, int basisSize, int *basisFlags,
      int *iblock, int blockSize, dummy_type_sprimme *basisNorms, int numConverged,
      dummy_type_sprimme *lockedEvals, int numLocked, int *lockedFlags, dummy_type_sprimme *lockedNorms,
      int inner_its, dummy_type_sprimme LSRes, const char *msg, double time,
      primme_event event, double startTime, primme_context ctx);
void Num_compute_residual_cprimme(PRIMME_INT n, dummy_type_cprimme eval, dummy_type_cprimme *Bx,
   dummy_type_cprimme *Ax, dummy_type_cprimme *r, primme_context ctx);
int Num_update_VWXR_cprimme(dummy_type_cprimme *V, dummy_type_cprimme *W, dummy_type_cprimme *BV, PRIMME_INT mV,
      int nV, PRIMME_INT ldV, dummy_type_cprimme *h, int nh, int ldh, dummy_type_sprimme *hVals,
      dummy_type_cprimme *X0, int nX0b, int nX0e, PRIMME_INT ldX0,
      dummy_type_cprimme *X1, int nX1b, int nX1e, PRIMME_INT ldX1,
      dummy_type_cprimme *X2, int nX2b, int nX2e, PRIMME_INT ldX2,
      dummy_type_cprimme *Wo, int nWob, int nWoe, PRIMME_INT ldWo,
      dummy_type_cprimme *R, int nRb, int nRe, PRIMME_INT ldR, dummy_type_sprimme *Rnorms,
      dummy_type_cprimme *BX0, int nBX0b, int nBX0e, PRIMME_INT ldBX0,
      dummy_type_cprimme *BX1, int nBX1b, int nBX1e, PRIMME_INT ldBX1,
      dummy_type_cprimme *BX2, int nBX2b, int nBX2e, PRIMME_INT ldBX2,
      dummy_type_sprimme *rnorms, int nrb, int nre,
      dummy_type_cprimme *G, int nG, int ldG,
      dummy_type_cprimme *H, int nH, int ldH,
      dummy_type_sprimme *xnorms, int nxb, int nxe,
      primme_context ctx);
int applyPreconditioner_cprimme(dummy_type_cprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_cprimme *W, PRIMME_INT ldW, int blockSize, primme_context ctx);
int convTestFun_cprimme(dummy_type_sprimme eval, dummy_type_cprimme *evec, int givenEvec, dummy_type_sprimme rNorm,
      int *isconv, primme_context ctx);
int globalSum_cprimme(dummy_type_cprimme *sendBuf, dummy_type_cprimme *recvBuf, int count,
   primme_context ctx);
dummy_type_sprimme problemNorm_cprimme(
      int overrideUserEstimations, struct primme_params *primme);
dummy_type_sprimme deltaEig_cprimme(
      int overrideUserEstimations, struct primme_params *primme);
int Num_dist_dots_cprimme(dummy_type_cprimme *x, PRIMME_INT ldx, dummy_type_cprimme *y, PRIMME_INT ldy,
      PRIMME_INT m, int n, dummy_type_cprimme *result, primme_context ctx);
int Num_dist_dots_real_cprimme(dummy_type_cprimme *x, PRIMME_INT ldx, dummy_type_cprimme *y,
      PRIMME_INT ldy, PRIMME_INT m, int n, dummy_type_sprimme *result, primme_context ctx);
int monitorFun_cprimme(dummy_type_sprimme *basisEvals, int basisSize, int *basisFlags,
      int *iblock, int blockSize, dummy_type_sprimme *basisNorms, int numConverged,
      dummy_type_sprimme *lockedEvals, int numLocked, int *lockedFlags, dummy_type_sprimme *lockedNorms,
      int inner_its, dummy_type_sprimme LSRes, const char *msg, double time,
      primme_event event, double startTime, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(primme_get_contextSprimme)
#  define primme_get_contextSprimme CONCAT(primme_get_context,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(primme_get_contextRprimme)
#  define primme_get_contextRprimme CONCAT(primme_get_context,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(primme_get_contextSHprimme)
#  define primme_get_contextSHprimme CONCAT(primme_get_context,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(primme_get_contextRHprimme)
#  define primme_get_contextRHprimme CONCAT(primme_get_context,HOST_REAL_SUF)
#endif
primme_context primme_get_context(primme_params *primme);
#if !defined(CHECK_TEMPLATE) && !defined(primme_free_contextSprimme)
#  define primme_free_contextSprimme CONCAT(primme_free_context,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(primme_free_contextRprimme)
#  define primme_free_contextRprimme CONCAT(primme_free_context,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(primme_free_contextSHprimme)
#  define primme_free_contextSHprimme CONCAT(primme_free_context,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(primme_free_contextRHprimme)
#  define primme_free_contextRHprimme CONCAT(primme_free_context,HOST_REAL_SUF)
#endif
void primme_free_context(primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(Num_compute_residual_Sprimme)
#  define Num_compute_residual_Sprimme CONCAT(Num_compute_residual_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(Num_compute_residual_Rprimme)
#  define Num_compute_residual_Rprimme CONCAT(Num_compute_residual_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(Num_compute_residual_SHprimme)
#  define Num_compute_residual_SHprimme CONCAT(Num_compute_residual_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(Num_compute_residual_RHprimme)
#  define Num_compute_residual_RHprimme CONCAT(Num_compute_residual_,HOST_REAL_SUF)
#endif
void Num_compute_residual_dprimme(PRIMME_INT n, dummy_type_dprimme eval, dummy_type_dprimme *Bx,
   dummy_type_dprimme *Ax, dummy_type_dprimme *r, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(Num_update_VWXR_Sprimme)
#  define Num_update_VWXR_Sprimme CONCAT(Num_update_VWXR_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(Num_update_VWXR_Rprimme)
#  define Num_update_VWXR_Rprimme CONCAT(Num_update_VWXR_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(Num_update_VWXR_SHprimme)
#  define Num_update_VWXR_SHprimme CONCAT(Num_update_VWXR_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(Num_update_VWXR_RHprimme)
#  define Num_update_VWXR_RHprimme CONCAT(Num_update_VWXR_,HOST_REAL_SUF)
#endif
int Num_update_VWXR_dprimme(dummy_type_dprimme *V, dummy_type_dprimme *W, dummy_type_dprimme *BV, PRIMME_INT mV,
      int nV, PRIMME_INT ldV, dummy_type_dprimme *h, int nh, int ldh, dummy_type_dprimme *hVals,
      dummy_type_dprimme *X0, int nX0b, int nX0e, PRIMME_INT ldX0,
      dummy_type_dprimme *X1, int nX1b, int nX1e, PRIMME_INT ldX1,
      dummy_type_dprimme *X2, int nX2b, int nX2e, PRIMME_INT ldX2,
      dummy_type_dprimme *Wo, int nWob, int nWoe, PRIMME_INT ldWo,
      dummy_type_dprimme *R, int nRb, int nRe, PRIMME_INT ldR, dummy_type_dprimme *Rnorms,
      dummy_type_dprimme *BX0, int nBX0b, int nBX0e, PRIMME_INT ldBX0,
      dummy_type_dprimme *BX1, int nBX1b, int nBX1e, PRIMME_INT ldBX1,
      dummy_type_dprimme *BX2, int nBX2b, int nBX2e, PRIMME_INT ldBX2,
      dummy_type_dprimme *rnorms, int nrb, int nre,
      dummy_type_dprimme *G, int nG, int ldG,
      dummy_type_dprimme *H, int nH, int ldH,
      dummy_type_dprimme *xnorms, int nxb, int nxe,
      primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(applyPreconditioner_Sprimme)
#  define applyPreconditioner_Sprimme CONCAT(applyPreconditioner_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(applyPreconditioner_Rprimme)
#  define applyPreconditioner_Rprimme CONCAT(applyPreconditioner_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(applyPreconditioner_SHprimme)
#  define applyPreconditioner_SHprimme CONCAT(applyPreconditioner_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(applyPreconditioner_RHprimme)
#  define applyPreconditioner_RHprimme CONCAT(applyPreconditioner_,HOST_REAL_SUF)
#endif
int applyPreconditioner_dprimme(dummy_type_dprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_dprimme *W, PRIMME_INT ldW, int blockSize, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(convTestFun_Sprimme)
#  define convTestFun_Sprimme CONCAT(convTestFun_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(convTestFun_Rprimme)
#  define convTestFun_Rprimme CONCAT(convTestFun_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(convTestFun_SHprimme)
#  define convTestFun_SHprimme CONCAT(convTestFun_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(convTestFun_RHprimme)
#  define convTestFun_RHprimme CONCAT(convTestFun_,HOST_REAL_SUF)
#endif
int convTestFun_dprimme(dummy_type_dprimme eval, dummy_type_dprimme *evec, int givenEvec, dummy_type_dprimme rNorm,
      int *isconv, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(globalSum_Sprimme)
#  define globalSum_Sprimme CONCAT(globalSum_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(globalSum_Rprimme)
#  define globalSum_Rprimme CONCAT(globalSum_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(globalSum_SHprimme)
#  define globalSum_SHprimme CONCAT(globalSum_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(globalSum_RHprimme)
#  define globalSum_RHprimme CONCAT(globalSum_,HOST_REAL_SUF)
#endif
int globalSum_dprimme(dummy_type_dprimme *sendBuf, dummy_type_dprimme *recvBuf, int count,
   primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(problemNorm_Sprimme)
#  define problemNorm_Sprimme CONCAT(problemNorm_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(problemNorm_Rprimme)
#  define problemNorm_Rprimme CONCAT(problemNorm_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(problemNorm_SHprimme)
#  define problemNorm_SHprimme CONCAT(problemNorm_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(problemNorm_RHprimme)
#  define problemNorm_RHprimme CONCAT(problemNorm_,HOST_REAL_SUF)
#endif
dummy_type_dprimme problemNorm_dprimme(
      int overrideUserEstimations, struct primme_params *primme);
#if !defined(CHECK_TEMPLATE) && !defined(deltaEig_Sprimme)
#  define deltaEig_Sprimme CONCAT(deltaEig_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(deltaEig_Rprimme)
#  define deltaEig_Rprimme CONCAT(deltaEig_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(deltaEig_SHprimme)
#  define deltaEig_SHprimme CONCAT(deltaEig_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(deltaEig_RHprimme)
#  define deltaEig_RHprimme CONCAT(deltaEig_,HOST_REAL_SUF)
#endif
dummy_type_dprimme deltaEig_dprimme(
      int overrideUserEstimations, struct primme_params *primme);
#if !defined(CHECK_TEMPLATE) && !defined(Num_dist_dots_Sprimme)
#  define Num_dist_dots_Sprimme CONCAT(Num_dist_dots_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(Num_dist_dots_Rprimme)
#  define Num_dist_dots_Rprimme CONCAT(Num_dist_dots_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(Num_dist_dots_SHprimme)
#  define Num_dist_dots_SHprimme CONCAT(Num_dist_dots_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(Num_dist_dots_RHprimme)
#  define Num_dist_dots_RHprimme CONCAT(Num_dist_dots_,HOST_REAL_SUF)
#endif
int Num_dist_dots_dprimme(dummy_type_dprimme *x, PRIMME_INT ldx, dummy_type_dprimme *y, PRIMME_INT ldy,
      PRIMME_INT m, int n, dummy_type_dprimme *result, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(Num_dist_dots_real_Sprimme)
#  define Num_dist_dots_real_Sprimme CONCAT(Num_dist_dots_real_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(Num_dist_dots_real_Rprimme)
#  define Num_dist_dots_real_Rprimme CONCAT(Num_dist_dots_real_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(Num_dist_dots_real_SHprimme)
#  define Num_dist_dots_real_SHprimme CONCAT(Num_dist_dots_real_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(Num_dist_dots_real_RHprimme)
#  define Num_dist_dots_real_RHprimme CONCAT(Num_dist_dots_real_,HOST_REAL_SUF)
#endif
int Num_dist_dots_real_dprimme(dummy_type_dprimme *x, PRIMME_INT ldx, dummy_type_dprimme *y,
      PRIMME_INT ldy, PRIMME_INT m, int n, dummy_type_dprimme *result, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(monitorFun_Sprimme)
#  define monitorFun_Sprimme CONCAT(monitorFun_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(monitorFun_Rprimme)
#  define monitorFun_Rprimme CONCAT(monitorFun_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(monitorFun_SHprimme)
#  define monitorFun_SHprimme CONCAT(monitorFun_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(monitorFun_RHprimme)
#  define monitorFun_RHprimme CONCAT(monitorFun_,HOST_REAL_SUF)
#endif
int monitorFun_dprimme(dummy_type_dprimme *basisEvals, int basisSize, int *basisFlags,
      int *iblock, int blockSize, dummy_type_dprimme *basisNorms, int numConverged,
      dummy_type_dprimme *lockedEvals, int numLocked, int *lockedFlags, dummy_type_dprimme *lockedNorms,
      int inner_its, dummy_type_dprimme LSRes, const char *msg, double time,
      primme_event event, double startTime, primme_context ctx);
void Num_compute_residual_zprimme(PRIMME_INT n, dummy_type_zprimme eval, dummy_type_zprimme *Bx,
   dummy_type_zprimme *Ax, dummy_type_zprimme *r, primme_context ctx);
int Num_update_VWXR_zprimme(dummy_type_zprimme *V, dummy_type_zprimme *W, dummy_type_zprimme *BV, PRIMME_INT mV,
      int nV, PRIMME_INT ldV, dummy_type_zprimme *h, int nh, int ldh, dummy_type_dprimme *hVals,
      dummy_type_zprimme *X0, int nX0b, int nX0e, PRIMME_INT ldX0,
      dummy_type_zprimme *X1, int nX1b, int nX1e, PRIMME_INT ldX1,
      dummy_type_zprimme *X2, int nX2b, int nX2e, PRIMME_INT ldX2,
      dummy_type_zprimme *Wo, int nWob, int nWoe, PRIMME_INT ldWo,
      dummy_type_zprimme *R, int nRb, int nRe, PRIMME_INT ldR, dummy_type_dprimme *Rnorms,
      dummy_type_zprimme *BX0, int nBX0b, int nBX0e, PRIMME_INT ldBX0,
      dummy_type_zprimme *BX1, int nBX1b, int nBX1e, PRIMME_INT ldBX1,
      dummy_type_zprimme *BX2, int nBX2b, int nBX2e, PRIMME_INT ldBX2,
      dummy_type_dprimme *rnorms, int nrb, int nre,
      dummy_type_zprimme *G, int nG, int ldG,
      dummy_type_zprimme *H, int nH, int ldH,
      dummy_type_dprimme *xnorms, int nxb, int nxe,
      primme_context ctx);
int applyPreconditioner_zprimme(dummy_type_zprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_zprimme *W, PRIMME_INT ldW, int blockSize, primme_context ctx);
int convTestFun_zprimme(dummy_type_dprimme eval, dummy_type_zprimme *evec, int givenEvec, dummy_type_dprimme rNorm,
      int *isconv, primme_context ctx);
int globalSum_zprimme(dummy_type_zprimme *sendBuf, dummy_type_zprimme *recvBuf, int count,
   primme_context ctx);
dummy_type_dprimme problemNorm_zprimme(
      int overrideUserEstimations, struct primme_params *primme);
dummy_type_dprimme deltaEig_zprimme(
      int overrideUserEstimations, struct primme_params *primme);
int Num_dist_dots_zprimme(dummy_type_zprimme *x, PRIMME_INT ldx, dummy_type_zprimme *y, PRIMME_INT ldy,
      PRIMME_INT m, int n, dummy_type_zprimme *result, primme_context ctx);
int Num_dist_dots_real_zprimme(dummy_type_zprimme *x, PRIMME_INT ldx, dummy_type_zprimme *y,
      PRIMME_INT ldy, PRIMME_INT m, int n, dummy_type_dprimme *result, primme_context ctx);
int monitorFun_zprimme(dummy_type_dprimme *basisEvals, int basisSize, int *basisFlags,
      int *iblock, int blockSize, dummy_type_dprimme *basisNorms, int numConverged,
      dummy_type_dprimme *lockedEvals, int numLocked, int *lockedFlags, dummy_type_dprimme *lockedNorms,
      int inner_its, dummy_type_dprimme LSRes, const char *msg, double time,
      primme_event event, double startTime, primme_context ctx);
void Num_compute_residual_magma_sprimme(PRIMME_INT n, dummy_type_sprimme eval, dummy_type_magma_sprimme *Bx,
   dummy_type_magma_sprimme *Ax, dummy_type_magma_sprimme *r, primme_context ctx);
int Num_update_VWXR_magma_sprimme(dummy_type_magma_sprimme *V, dummy_type_magma_sprimme *W, dummy_type_magma_sprimme *BV, PRIMME_INT mV,
      int nV, PRIMME_INT ldV, dummy_type_sprimme *h, int nh, int ldh, dummy_type_sprimme *hVals,
      dummy_type_magma_sprimme *X0, int nX0b, int nX0e, PRIMME_INT ldX0,
      dummy_type_magma_sprimme *X1, int nX1b, int nX1e, PRIMME_INT ldX1,
      dummy_type_magma_sprimme *X2, int nX2b, int nX2e, PRIMME_INT ldX2,
      dummy_type_magma_sprimme *Wo, int nWob, int nWoe, PRIMME_INT ldWo,
      dummy_type_magma_sprimme *R, int nRb, int nRe, PRIMME_INT ldR, dummy_type_sprimme *Rnorms,
      dummy_type_magma_sprimme *BX0, int nBX0b, int nBX0e, PRIMME_INT ldBX0,
      dummy_type_magma_sprimme *BX1, int nBX1b, int nBX1e, PRIMME_INT ldBX1,
      dummy_type_magma_sprimme *BX2, int nBX2b, int nBX2e, PRIMME_INT ldBX2,
      dummy_type_sprimme *rnorms, int nrb, int nre,
      dummy_type_sprimme *G, int nG, int ldG,
      dummy_type_sprimme *H, int nH, int ldH,
      dummy_type_sprimme *xnorms, int nxb, int nxe,
      primme_context ctx);
int applyPreconditioner_magma_sprimme(dummy_type_magma_sprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_sprimme *W, PRIMME_INT ldW, int blockSize, primme_context ctx);
int convTestFun_magma_sprimme(dummy_type_sprimme eval, dummy_type_magma_sprimme *evec, int givenEvec, dummy_type_sprimme rNorm,
      int *isconv, primme_context ctx);
dummy_type_sprimme problemNorm_magma_sprimme(
      int overrideUserEstimations, struct primme_params *primme);
dummy_type_sprimme deltaEig_magma_sprimme(
      int overrideUserEstimations, struct primme_params *primme);
int Num_dist_dots_magma_sprimme(dummy_type_magma_sprimme *x, PRIMME_INT ldx, dummy_type_magma_sprimme *y, PRIMME_INT ldy,
      PRIMME_INT m, int n, dummy_type_sprimme *result, primme_context ctx);
int Num_dist_dots_real_magma_sprimme(dummy_type_magma_sprimme *x, PRIMME_INT ldx, dummy_type_magma_sprimme *y,
      PRIMME_INT ldy, PRIMME_INT m, int n, dummy_type_sprimme *result, primme_context ctx);
int monitorFun_magma_sprimme(dummy_type_sprimme *basisEvals, int basisSize, int *basisFlags,
      int *iblock, int blockSize, dummy_type_sprimme *basisNorms, int numConverged,
      dummy_type_sprimme *lockedEvals, int numLocked, int *lockedFlags, dummy_type_sprimme *lockedNorms,
      int inner_its, dummy_type_sprimme LSRes, const char *msg, double time,
      primme_event event, double startTime, primme_context ctx);
void Num_compute_residual_magma_cprimme(PRIMME_INT n, dummy_type_cprimme eval, dummy_type_magma_cprimme *Bx,
   dummy_type_magma_cprimme *Ax, dummy_type_magma_cprimme *r, primme_context ctx);
int Num_update_VWXR_magma_cprimme(dummy_type_magma_cprimme *V, dummy_type_magma_cprimme *W, dummy_type_magma_cprimme *BV, PRIMME_INT mV,
      int nV, PRIMME_INT ldV, dummy_type_cprimme *h, int nh, int ldh, dummy_type_sprimme *hVals,
      dummy_type_magma_cprimme *X0, int nX0b, int nX0e, PRIMME_INT ldX0,
      dummy_type_magma_cprimme *X1, int nX1b, int nX1e, PRIMME_INT ldX1,
      dummy_type_magma_cprimme *X2, int nX2b, int nX2e, PRIMME_INT ldX2,
      dummy_type_magma_cprimme *Wo, int nWob, int nWoe, PRIMME_INT ldWo,
      dummy_type_magma_cprimme *R, int nRb, int nRe, PRIMME_INT ldR, dummy_type_sprimme *Rnorms,
      dummy_type_magma_cprimme *BX0, int nBX0b, int nBX0e, PRIMME_INT ldBX0,
      dummy_type_magma_cprimme *BX1, int nBX1b, int nBX1e, PRIMME_INT ldBX1,
      dummy_type_magma_cprimme *BX2, int nBX2b, int nBX2e, PRIMME_INT ldBX2,
      dummy_type_sprimme *rnorms, int nrb, int nre,
      dummy_type_cprimme *G, int nG, int ldG,
      dummy_type_cprimme *H, int nH, int ldH,
      dummy_type_sprimme *xnorms, int nxb, int nxe,
      primme_context ctx);
int applyPreconditioner_magma_cprimme(dummy_type_magma_cprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_cprimme *W, PRIMME_INT ldW, int blockSize, primme_context ctx);
int convTestFun_magma_cprimme(dummy_type_sprimme eval, dummy_type_magma_cprimme *evec, int givenEvec, dummy_type_sprimme rNorm,
      int *isconv, primme_context ctx);
dummy_type_sprimme problemNorm_magma_cprimme(
      int overrideUserEstimations, struct primme_params *primme);
dummy_type_sprimme deltaEig_magma_cprimme(
      int overrideUserEstimations, struct primme_params *primme);
int Num_dist_dots_magma_cprimme(dummy_type_magma_cprimme *x, PRIMME_INT ldx, dummy_type_magma_cprimme *y, PRIMME_INT ldy,
      PRIMME_INT m, int n, dummy_type_cprimme *result, primme_context ctx);
int Num_dist_dots_real_magma_cprimme(dummy_type_magma_cprimme *x, PRIMME_INT ldx, dummy_type_magma_cprimme *y,
      PRIMME_INT ldy, PRIMME_INT m, int n, dummy_type_sprimme *result, primme_context ctx);
int monitorFun_magma_cprimme(dummy_type_sprimme *basisEvals, int basisSize, int *basisFlags,
      int *iblock, int blockSize, dummy_type_sprimme *basisNorms, int numConverged,
      dummy_type_sprimme *lockedEvals, int numLocked, int *lockedFlags, dummy_type_sprimme *lockedNorms,
      int inner_its, dummy_type_sprimme LSRes, const char *msg, double time,
      primme_event event, double startTime, primme_context ctx);
void Num_compute_residual_magma_dprimme(PRIMME_INT n, dummy_type_dprimme eval, dummy_type_magma_dprimme *Bx,
   dummy_type_magma_dprimme *Ax, dummy_type_magma_dprimme *r, primme_context ctx);
int Num_update_VWXR_magma_dprimme(dummy_type_magma_dprimme *V, dummy_type_magma_dprimme *W, dummy_type_magma_dprimme *BV, PRIMME_INT mV,
      int nV, PRIMME_INT ldV, dummy_type_dprimme *h, int nh, int ldh, dummy_type_dprimme *hVals,
      dummy_type_magma_dprimme *X0, int nX0b, int nX0e, PRIMME_INT ldX0,
      dummy_type_magma_dprimme *X1, int nX1b, int nX1e, PRIMME_INT ldX1,
      dummy_type_magma_dprimme *X2, int nX2b, int nX2e, PRIMME_INT ldX2,
      dummy_type_magma_dprimme *Wo, int nWob, int nWoe, PRIMME_INT ldWo,
      dummy_type_magma_dprimme *R, int nRb, int nRe, PRIMME_INT ldR, dummy_type_dprimme *Rnorms,
      dummy_type_magma_dprimme *BX0, int nBX0b, int nBX0e, PRIMME_INT ldBX0,
      dummy_type_magma_dprimme *BX1, int nBX1b, int nBX1e, PRIMME_INT ldBX1,
      dummy_type_magma_dprimme *BX2, int nBX2b, int nBX2e, PRIMME_INT ldBX2,
      dummy_type_dprimme *rnorms, int nrb, int nre,
      dummy_type_dprimme *G, int nG, int ldG,
      dummy_type_dprimme *H, int nH, int ldH,
      dummy_type_dprimme *xnorms, int nxb, int nxe,
      primme_context ctx);
int applyPreconditioner_magma_dprimme(dummy_type_magma_dprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_dprimme *W, PRIMME_INT ldW, int blockSize, primme_context ctx);
int convTestFun_magma_dprimme(dummy_type_dprimme eval, dummy_type_magma_dprimme *evec, int givenEvec, dummy_type_dprimme rNorm,
      int *isconv, primme_context ctx);
dummy_type_dprimme problemNorm_magma_dprimme(
      int overrideUserEstimations, struct primme_params *primme);
dummy_type_dprimme deltaEig_magma_dprimme(
      int overrideUserEstimations, struct primme_params *primme);
int Num_dist_dots_magma_dprimme(dummy_type_magma_dprimme *x, PRIMME_INT ldx, dummy_type_magma_dprimme *y, PRIMME_INT ldy,
      PRIMME_INT m, int n, dummy_type_dprimme *result, primme_context ctx);
int Num_dist_dots_real_magma_dprimme(dummy_type_magma_dprimme *x, PRIMME_INT ldx, dummy_type_magma_dprimme *y,
      PRIMME_INT ldy, PRIMME_INT m, int n, dummy_type_dprimme *result, primme_context ctx);
int monitorFun_magma_dprimme(dummy_type_dprimme *basisEvals, int basisSize, int *basisFlags,
      int *iblock, int blockSize, dummy_type_dprimme *basisNorms, int numConverged,
      dummy_type_dprimme *lockedEvals, int numLocked, int *lockedFlags, dummy_type_dprimme *lockedNorms,
      int inner_its, dummy_type_dprimme LSRes, const char *msg, double time,
      primme_event event, double startTime, primme_context ctx);
void Num_compute_residual_magma_zprimme(PRIMME_INT n, dummy_type_zprimme eval, dummy_type_magma_zprimme *Bx,
   dummy_type_magma_zprimme *Ax, dummy_type_magma_zprimme *r, primme_context ctx);
int Num_update_VWXR_magma_zprimme(dummy_type_magma_zprimme *V, dummy_type_magma_zprimme *W, dummy_type_magma_zprimme *BV, PRIMME_INT mV,
      int nV, PRIMME_INT ldV, dummy_type_zprimme *h, int nh, int ldh, dummy_type_dprimme *hVals,
      dummy_type_magma_zprimme *X0, int nX0b, int nX0e, PRIMME_INT ldX0,
      dummy_type_magma_zprimme *X1, int nX1b, int nX1e, PRIMME_INT ldX1,
      dummy_type_magma_zprimme *X2, int nX2b, int nX2e, PRIMME_INT ldX2,
      dummy_type_magma_zprimme *Wo, int nWob, int nWoe, PRIMME_INT ldWo,
      dummy_type_magma_zprimme *R, int nRb, int nRe, PRIMME_INT ldR, dummy_type_dprimme *Rnorms,
      dummy_type_magma_zprimme *BX0, int nBX0b, int nBX0e, PRIMME_INT ldBX0,
      dummy_type_magma_zprimme *BX1, int nBX1b, int nBX1e, PRIMME_INT ldBX1,
      dummy_type_magma_zprimme *BX2, int nBX2b, int nBX2e, PRIMME_INT ldBX2,
      dummy_type_dprimme *rnorms, int nrb, int nre,
      dummy_type_zprimme *G, int nG, int ldG,
      dummy_type_zprimme *H, int nH, int ldH,
      dummy_type_dprimme *xnorms, int nxb, int nxe,
      primme_context ctx);
int applyPreconditioner_magma_zprimme(dummy_type_magma_zprimme *V, PRIMME_INT nLocal, PRIMME_INT ldV,
      dummy_type_magma_zprimme *W, PRIMME_INT ldW, int blockSize, primme_context ctx);
int convTestFun_magma_zprimme(dummy_type_dprimme eval, dummy_type_magma_zprimme *evec, int givenEvec, dummy_type_dprimme rNorm,
      int *isconv, primme_context ctx);
dummy_type_dprimme problemNorm_magma_zprimme(
      int overrideUserEstimations, struct primme_params *primme);
dummy_type_dprimme deltaEig_magma_zprimme(
      int overrideUserEstimations, struct primme_params *primme);
int Num_dist_dots_magma_zprimme(dummy_type_magma_zprimme *x, PRIMME_INT ldx, dummy_type_magma_zprimme *y, PRIMME_INT ldy,
      PRIMME_INT m, int n, dummy_type_zprimme *result, primme_context ctx);
int Num_dist_dots_real_magma_zprimme(dummy_type_magma_zprimme *x, PRIMME_INT ldx, dummy_type_magma_zprimme *y,
      PRIMME_INT ldy, PRIMME_INT m, int n, dummy_type_dprimme *result, primme_context ctx);
int monitorFun_magma_zprimme(dummy_type_dprimme *basisEvals, int basisSize, int *basisFlags,
      int *iblock, int blockSize, dummy_type_dprimme *basisNorms, int numConverged,
      dummy_type_dprimme *lockedEvals, int numLocked, int *lockedFlags, dummy_type_dprimme *lockedNorms,
      int inner_its, dummy_type_dprimme LSRes, const char *msg, double time,
      primme_event event, double startTime, primme_context ctx);
#endif
