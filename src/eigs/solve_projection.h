/*******************************************************************************
 * Copyright (c) 2018, College of William & Mary
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the College of William & Mary nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COLLEGE OF WILLIAM & MARY BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * PRIMME: https://github.com/primme/primme
 * Contact: Andreas Stathopoulos, a n d r e a s _at_ c s . w m . e d u
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef solve_projection_H
#define solve_projection_H
int solve_H_sprimme(dummy_type_sprimme *H, int basisSize, int ldH, dummy_type_sprimme *VtBV, int ldVtBV,
      dummy_type_sprimme *R, int ldR, dummy_type_sprimme *QtV, int ldQtV, dummy_type_sprimme *QtQ, int ldQtQ,
      dummy_type_sprimme *hU, int ldhU, dummy_type_sprimme *hVecs, int ldhVecs, dummy_type_sprimme *hVals,
      dummy_type_sprimme *hSVals, int numConverged, primme_context ctx);
int prepare_vecs_sprimme(int basisSize, int i0, int blockSize, dummy_type_sprimme *H,
      int ldH, dummy_type_sprimme *hVals, dummy_type_sprimme *hSVals, dummy_type_sprimme *hVecs, int ldhVecs,
      int targetShiftIndex, int *arbitraryVecs, double smallestResNorm,
      int *flags, int *map, int RRForAll, dummy_type_sprimme *hVecsRot, int ldhVecsRot,
      dummy_type_sprimme *prevhVecs, int nprevhVecs, int ldprevhVecs, primme_context ctx);
int map_vecs_sprimme(dummy_type_sprimme *V, int m, int nV, int ldV, dummy_type_sprimme *W, int n0,
      int n, int ldW, int *p, primme_context ctx);
int solve_H_cprimme(dummy_type_cprimme *H, int basisSize, int ldH, dummy_type_cprimme *VtBV, int ldVtBV,
      dummy_type_cprimme *R, int ldR, dummy_type_cprimme *QtV, int ldQtV, dummy_type_cprimme *QtQ, int ldQtQ,
      dummy_type_cprimme *hU, int ldhU, dummy_type_cprimme *hVecs, int ldhVecs, dummy_type_sprimme *hVals,
      dummy_type_sprimme *hSVals, int numConverged, primme_context ctx);
int prepare_vecs_cprimme(int basisSize, int i0, int blockSize, dummy_type_cprimme *H,
      int ldH, dummy_type_sprimme *hVals, dummy_type_sprimme *hSVals, dummy_type_cprimme *hVecs, int ldhVecs,
      int targetShiftIndex, int *arbitraryVecs, double smallestResNorm,
      int *flags, int *map, int RRForAll, dummy_type_cprimme *hVecsRot, int ldhVecsRot,
      dummy_type_cprimme *prevhVecs, int nprevhVecs, int ldprevhVecs, primme_context ctx);
int map_vecs_cprimme(dummy_type_cprimme *V, int m, int nV, int ldV, dummy_type_cprimme *W, int n0,
      int n, int ldW, int *p, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(solve_H_Sprimme)
#  define solve_H_Sprimme CONCAT(solve_H_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(solve_H_Rprimme)
#  define solve_H_Rprimme CONCAT(solve_H_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(solve_H_SHprimme)
#  define solve_H_SHprimme CONCAT(solve_H_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(solve_H_RHprimme)
#  define solve_H_RHprimme CONCAT(solve_H_,HOST_REAL_SUF)
#endif
int solve_H_dprimme(dummy_type_dprimme *H, int basisSize, int ldH, dummy_type_dprimme *VtBV, int ldVtBV,
      dummy_type_dprimme *R, int ldR, dummy_type_dprimme *QtV, int ldQtV, dummy_type_dprimme *QtQ, int ldQtQ,
      dummy_type_dprimme *hU, int ldhU, dummy_type_dprimme *hVecs, int ldhVecs, dummy_type_dprimme *hVals,
      dummy_type_dprimme *hSVals, int numConverged, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(prepare_vecs_Sprimme)
#  define prepare_vecs_Sprimme CONCAT(prepare_vecs_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(prepare_vecs_Rprimme)
#  define prepare_vecs_Rprimme CONCAT(prepare_vecs_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(prepare_vecs_SHprimme)
#  define prepare_vecs_SHprimme CONCAT(prepare_vecs_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(prepare_vecs_RHprimme)
#  define prepare_vecs_RHprimme CONCAT(prepare_vecs_,HOST_REAL_SUF)
#endif
int prepare_vecs_dprimme(int basisSize, int i0, int blockSize, dummy_type_dprimme *H,
      int ldH, dummy_type_dprimme *hVals, dummy_type_dprimme *hSVals, dummy_type_dprimme *hVecs, int ldhVecs,
      int targetShiftIndex, int *arbitraryVecs, double smallestResNorm,
      int *flags, int *map, int RRForAll, dummy_type_dprimme *hVecsRot, int ldhVecsRot,
      dummy_type_dprimme *prevhVecs, int nprevhVecs, int ldprevhVecs, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(map_vecs_Sprimme)
#  define map_vecs_Sprimme CONCAT(map_vecs_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(map_vecs_Rprimme)
#  define map_vecs_Rprimme CONCAT(map_vecs_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(map_vecs_SHprimme)
#  define map_vecs_SHprimme CONCAT(map_vecs_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(map_vecs_RHprimme)
#  define map_vecs_RHprimme CONCAT(map_vecs_,HOST_REAL_SUF)
#endif
int map_vecs_dprimme(dummy_type_dprimme *V, int m, int nV, int ldV, dummy_type_dprimme *W, int n0,
      int n, int ldW, int *p, primme_context ctx);
int solve_H_zprimme(dummy_type_zprimme *H, int basisSize, int ldH, dummy_type_zprimme *VtBV, int ldVtBV,
      dummy_type_zprimme *R, int ldR, dummy_type_zprimme *QtV, int ldQtV, dummy_type_zprimme *QtQ, int ldQtQ,
      dummy_type_zprimme *hU, int ldhU, dummy_type_zprimme *hVecs, int ldhVecs, dummy_type_dprimme *hVals,
      dummy_type_dprimme *hSVals, int numConverged, primme_context ctx);
int prepare_vecs_zprimme(int basisSize, int i0, int blockSize, dummy_type_zprimme *H,
      int ldH, dummy_type_dprimme *hVals, dummy_type_dprimme *hSVals, dummy_type_zprimme *hVecs, int ldhVecs,
      int targetShiftIndex, int *arbitraryVecs, double smallestResNorm,
      int *flags, int *map, int RRForAll, dummy_type_zprimme *hVecsRot, int ldhVecsRot,
      dummy_type_zprimme *prevhVecs, int nprevhVecs, int ldprevhVecs, primme_context ctx);
int map_vecs_zprimme(dummy_type_zprimme *V, int m, int nV, int ldV, dummy_type_zprimme *W, int n0,
      int n, int ldW, int *p, primme_context ctx);
#endif
