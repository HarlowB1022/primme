/*******************************************************************************
 * Copyright (c) 2017, College of William & Mary
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the College of William & Mary nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COLLEGE OF WILLIAM & MARY BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * PRIMME: https://github.com/primme/primme
 * Contact: Andreas Stathopoulos, a n d r e a s _at_ c s . w m . e d u
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef main_iter_H
#define main_iter_H
int main_iter_sprimme(float *evals, int *perm, float *evecs, PRIMME_INT ldevecs,
   float *resNorms, double startTime, int *ret, primme_context ctx);
int prepare_candidates_sprimme(float *V, PRIMME_INT ldV, float *W,
      PRIMME_INT ldW, float *BV, PRIMME_INT ldBV, PRIMME_INT nLocal,
      float *H, int ldH, int basisSize, float *X, float *R, float *BX,
      int computeXR, float *hVecs, int ldhVecs, float *hVals, float *hSVals,
      int *flags, int remainedEvals, float *blockNorms, int blockNormsSize,
      int maxBlockSize, float *evecs, int numLocked, PRIMME_INT ldevecs,
      float *Bevecs, PRIMME_INT ldBevecs, float *evals, float *resNorms,
      int targetShiftIndex, int *iev, int *blockSize, int *recentlyConverged,
      int *numArbitraryVecs, double *smallestResNorm, float *hVecsRot,
      int ldhVecsRot, int numConverged, float *basisNorms, int *reset,
      float *VtBV, int ldVtBV, float *prevhVecs, int nprevhVecs,
      int ldprevhVecs, int practConvChecking, primme_context ctx);
int main_iter_cprimme(float *evals, int *perm, PRIMME_COMPLEX_FLOAT *evecs, PRIMME_INT ldevecs,
   float *resNorms, double startTime, int *ret, primme_context ctx);
int prepare_candidates_cprimme(PRIMME_COMPLEX_FLOAT *V, PRIMME_INT ldV, PRIMME_COMPLEX_FLOAT *W,
      PRIMME_INT ldW, PRIMME_COMPLEX_FLOAT *BV, PRIMME_INT ldBV, PRIMME_INT nLocal,
      PRIMME_COMPLEX_FLOAT *H, int ldH, int basisSize, PRIMME_COMPLEX_FLOAT *X, PRIMME_COMPLEX_FLOAT *R, PRIMME_COMPLEX_FLOAT *BX,
      int computeXR, PRIMME_COMPLEX_FLOAT *hVecs, int ldhVecs, float *hVals, float *hSVals,
      int *flags, int remainedEvals, float *blockNorms, int blockNormsSize,
      int maxBlockSize, PRIMME_COMPLEX_FLOAT *evecs, int numLocked, PRIMME_INT ldevecs,
      PRIMME_COMPLEX_FLOAT *Bevecs, PRIMME_INT ldBevecs, float *evals, float *resNorms,
      int targetShiftIndex, int *iev, int *blockSize, int *recentlyConverged,
      int *numArbitraryVecs, double *smallestResNorm, PRIMME_COMPLEX_FLOAT *hVecsRot,
      int ldhVecsRot, int numConverged, float *basisNorms, int *reset,
      PRIMME_COMPLEX_FLOAT *VtBV, int ldVtBV, PRIMME_COMPLEX_FLOAT *prevhVecs, int nprevhVecs,
      int ldprevhVecs, int practConvChecking, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(main_iter_Sprimme)
#  define main_iter_Sprimme CONCAT(main_iter_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(main_iter_Rprimme)
#  define main_iter_Rprimme CONCAT(main_iter_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(main_iter_SHprimme)
#  define main_iter_SHprimme CONCAT(main_iter_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(main_iter_RHprimme)
#  define main_iter_RHprimme CONCAT(main_iter_,HOST_REAL_SUF)
#endif
int main_iter_dprimme(double *evals, int *perm, double *evecs, PRIMME_INT ldevecs,
   double *resNorms, double startTime, int *ret, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(prepare_candidates_Sprimme)
#  define prepare_candidates_Sprimme CONCAT(prepare_candidates_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(prepare_candidates_Rprimme)
#  define prepare_candidates_Rprimme CONCAT(prepare_candidates_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(prepare_candidates_SHprimme)
#  define prepare_candidates_SHprimme CONCAT(prepare_candidates_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(prepare_candidates_RHprimme)
#  define prepare_candidates_RHprimme CONCAT(prepare_candidates_,HOST_REAL_SUF)
#endif
int prepare_candidates_dprimme(double *V, PRIMME_INT ldV, double *W,
      PRIMME_INT ldW, double *BV, PRIMME_INT ldBV, PRIMME_INT nLocal,
      double *H, int ldH, int basisSize, double *X, double *R, double *BX,
      int computeXR, double *hVecs, int ldhVecs, double *hVals, double *hSVals,
      int *flags, int remainedEvals, double *blockNorms, int blockNormsSize,
      int maxBlockSize, double *evecs, int numLocked, PRIMME_INT ldevecs,
      double *Bevecs, PRIMME_INT ldBevecs, double *evals, double *resNorms,
      int targetShiftIndex, int *iev, int *blockSize, int *recentlyConverged,
      int *numArbitraryVecs, double *smallestResNorm, double *hVecsRot,
      int ldhVecsRot, int numConverged, double *basisNorms, int *reset,
      double *VtBV, int ldVtBV, double *prevhVecs, int nprevhVecs,
      int ldprevhVecs, int practConvChecking, primme_context ctx);
int main_iter_zprimme(double *evals, int *perm, PRIMME_COMPLEX_DOUBLE *evecs, PRIMME_INT ldevecs,
   double *resNorms, double startTime, int *ret, primme_context ctx);
int prepare_candidates_zprimme(PRIMME_COMPLEX_DOUBLE *V, PRIMME_INT ldV, PRIMME_COMPLEX_DOUBLE *W,
      PRIMME_INT ldW, PRIMME_COMPLEX_DOUBLE *BV, PRIMME_INT ldBV, PRIMME_INT nLocal,
      PRIMME_COMPLEX_DOUBLE *H, int ldH, int basisSize, PRIMME_COMPLEX_DOUBLE *X, PRIMME_COMPLEX_DOUBLE *R, PRIMME_COMPLEX_DOUBLE *BX,
      int computeXR, PRIMME_COMPLEX_DOUBLE *hVecs, int ldhVecs, double *hVals, double *hSVals,
      int *flags, int remainedEvals, double *blockNorms, int blockNormsSize,
      int maxBlockSize, PRIMME_COMPLEX_DOUBLE *evecs, int numLocked, PRIMME_INT ldevecs,
      PRIMME_COMPLEX_DOUBLE *Bevecs, PRIMME_INT ldBevecs, double *evals, double *resNorms,
      int targetShiftIndex, int *iev, int *blockSize, int *recentlyConverged,
      int *numArbitraryVecs, double *smallestResNorm, PRIMME_COMPLEX_DOUBLE *hVecsRot,
      int ldhVecsRot, int numConverged, double *basisNorms, int *reset,
      PRIMME_COMPLEX_DOUBLE *VtBV, int ldVtBV, PRIMME_COMPLEX_DOUBLE *prevhVecs, int nprevhVecs,
      int ldprevhVecs, int practConvChecking, primme_context ctx);
int main_iter_smagmaprimme(float *evals, int *perm, magma_float *evecs, PRIMME_INT ldevecs,
   float *resNorms, double startTime, int *ret, primme_context ctx);
int prepare_candidates_smagmaprimme(magma_float *V, PRIMME_INT ldV, magma_float *W,
      PRIMME_INT ldW, magma_float *BV, PRIMME_INT ldBV, PRIMME_INT nLocal,
      float *H, int ldH, int basisSize, magma_float *X, magma_float *R, magma_float *BX,
      int computeXR, float *hVecs, int ldhVecs, float *hVals, float *hSVals,
      int *flags, int remainedEvals, float *blockNorms, int blockNormsSize,
      int maxBlockSize, magma_float *evecs, int numLocked, PRIMME_INT ldevecs,
      magma_float *Bevecs, PRIMME_INT ldBevecs, float *evals, float *resNorms,
      int targetShiftIndex, int *iev, int *blockSize, int *recentlyConverged,
      int *numArbitraryVecs, double *smallestResNorm, float *hVecsRot,
      int ldhVecsRot, int numConverged, float *basisNorms, int *reset,
      float *VtBV, int ldVtBV, float *prevhVecs, int nprevhVecs,
      int ldprevhVecs, int practConvChecking, primme_context ctx);
int main_iter_cmagmaprimme(float *evals, int *perm, magma_complex_float *evecs, PRIMME_INT ldevecs,
   float *resNorms, double startTime, int *ret, primme_context ctx);
int prepare_candidates_cmagmaprimme(magma_complex_float *V, PRIMME_INT ldV, magma_complex_float *W,
      PRIMME_INT ldW, magma_complex_float *BV, PRIMME_INT ldBV, PRIMME_INT nLocal,
      PRIMME_COMPLEX_FLOAT *H, int ldH, int basisSize, magma_complex_float *X, magma_complex_float *R, magma_complex_float *BX,
      int computeXR, PRIMME_COMPLEX_FLOAT *hVecs, int ldhVecs, float *hVals, float *hSVals,
      int *flags, int remainedEvals, float *blockNorms, int blockNormsSize,
      int maxBlockSize, magma_complex_float *evecs, int numLocked, PRIMME_INT ldevecs,
      magma_complex_float *Bevecs, PRIMME_INT ldBevecs, float *evals, float *resNorms,
      int targetShiftIndex, int *iev, int *blockSize, int *recentlyConverged,
      int *numArbitraryVecs, double *smallestResNorm, PRIMME_COMPLEX_FLOAT *hVecsRot,
      int ldhVecsRot, int numConverged, float *basisNorms, int *reset,
      PRIMME_COMPLEX_FLOAT *VtBV, int ldVtBV, PRIMME_COMPLEX_FLOAT *prevhVecs, int nprevhVecs,
      int ldprevhVecs, int practConvChecking, primme_context ctx);
int main_iter_dmagmaprimme(double *evals, int *perm, magma_double *evecs, PRIMME_INT ldevecs,
   double *resNorms, double startTime, int *ret, primme_context ctx);
int prepare_candidates_dmagmaprimme(magma_double *V, PRIMME_INT ldV, magma_double *W,
      PRIMME_INT ldW, magma_double *BV, PRIMME_INT ldBV, PRIMME_INT nLocal,
      double *H, int ldH, int basisSize, magma_double *X, magma_double *R, magma_double *BX,
      int computeXR, double *hVecs, int ldhVecs, double *hVals, double *hSVals,
      int *flags, int remainedEvals, double *blockNorms, int blockNormsSize,
      int maxBlockSize, magma_double *evecs, int numLocked, PRIMME_INT ldevecs,
      magma_double *Bevecs, PRIMME_INT ldBevecs, double *evals, double *resNorms,
      int targetShiftIndex, int *iev, int *blockSize, int *recentlyConverged,
      int *numArbitraryVecs, double *smallestResNorm, double *hVecsRot,
      int ldhVecsRot, int numConverged, double *basisNorms, int *reset,
      double *VtBV, int ldVtBV, double *prevhVecs, int nprevhVecs,
      int ldprevhVecs, int practConvChecking, primme_context ctx);
int main_iter_zmagmaprimme(double *evals, int *perm, magma_complex_double *evecs, PRIMME_INT ldevecs,
   double *resNorms, double startTime, int *ret, primme_context ctx);
int prepare_candidates_zmagmaprimme(magma_complex_double *V, PRIMME_INT ldV, magma_complex_double *W,
      PRIMME_INT ldW, magma_complex_double *BV, PRIMME_INT ldBV, PRIMME_INT nLocal,
      PRIMME_COMPLEX_DOUBLE *H, int ldH, int basisSize, magma_complex_double *X, magma_complex_double *R, magma_complex_double *BX,
      int computeXR, PRIMME_COMPLEX_DOUBLE *hVecs, int ldhVecs, double *hVals, double *hSVals,
      int *flags, int remainedEvals, double *blockNorms, int blockNormsSize,
      int maxBlockSize, magma_complex_double *evecs, int numLocked, PRIMME_INT ldevecs,
      magma_complex_double *Bevecs, PRIMME_INT ldBevecs, double *evals, double *resNorms,
      int targetShiftIndex, int *iev, int *blockSize, int *recentlyConverged,
      int *numArbitraryVecs, double *smallestResNorm, PRIMME_COMPLEX_DOUBLE *hVecsRot,
      int ldhVecsRot, int numConverged, double *basisNorms, int *reset,
      PRIMME_COMPLEX_DOUBLE *VtBV, int ldVtBV, PRIMME_COMPLEX_DOUBLE *prevhVecs, int nprevhVecs,
      int ldprevhVecs, int practConvChecking, primme_context ctx);
#endif
