/*******************************************************************************
 * Copyright (c) 2018, College of William & Mary
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the College of William & Mary nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COLLEGE OF WILLIAM & MARY BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * PRIMME: https://github.com/primme/primme
 * Contact: Andreas Stathopoulos, a n d r e a s _at_ c s . w m . e d u
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef factorize_H
#define factorize_H
int update_XKinvBX_hprimme(dummy_type_hprimme *X, PRIMME_INT ldX, dummy_type_hprimme *KinvBX,
      PRIMME_INT ldKinvBX, dummy_type_sprimme *M, int ldM, int numCols,
      int blockSize, dummy_type_sprimme *Mfact, int ldMfact, int *ipivot,
      primme_context ctx);
int update_XKinvBX_kprimme(dummy_type_kprimme *X, PRIMME_INT ldX, dummy_type_kprimme *KinvBX,
      PRIMME_INT ldKinvBX, dummy_type_cprimme *M, int ldM, int numCols,
      int blockSize, dummy_type_cprimme *Mfact, int ldMfact, int *ipivot,
      primme_context ctx);
int UDUDecompose_sprimme(dummy_type_sprimme *M, int ldM, dummy_type_sprimme *UDU, int ldUDU,
      int *ipivot, int dimM, primme_context ctx);
int UDUSolve_sprimme(dummy_type_sprimme *UDU, int *ipivot, int dim, dummy_type_sprimme *rhs, int nrhs,
      int ldrhs, dummy_type_sprimme *sol, int ldsol, primme_context ctx);
int update_XKinvBX_sprimme(dummy_type_sprimme *X, PRIMME_INT ldX, dummy_type_sprimme *KinvBX,
      PRIMME_INT ldKinvBX, dummy_type_sprimme *M, int ldM, int numCols,
      int blockSize, dummy_type_sprimme *Mfact, int ldMfact, int *ipivot,
      primme_context ctx);
int MSolve_sprimme(dummy_type_sprimme *Mfact, int *ipivot, int dim, dummy_type_sprimme *rhs, int nrhs,
      int ldrhs, dummy_type_sprimme *sol, int ldsol, primme_context ctx);
int UDUDecompose_cprimme(dummy_type_cprimme *M, int ldM, dummy_type_cprimme *UDU, int ldUDU,
      int *ipivot, int dimM, primme_context ctx);
int UDUSolve_cprimme(dummy_type_cprimme *UDU, int *ipivot, int dim, dummy_type_cprimme *rhs, int nrhs,
      int ldrhs, dummy_type_cprimme *sol, int ldsol, primme_context ctx);
int update_XKinvBX_cprimme(dummy_type_cprimme *X, PRIMME_INT ldX, dummy_type_cprimme *KinvBX,
      PRIMME_INT ldKinvBX, dummy_type_cprimme *M, int ldM, int numCols,
      int blockSize, dummy_type_cprimme *Mfact, int ldMfact, int *ipivot,
      primme_context ctx);
int MSolve_cprimme(dummy_type_cprimme *Mfact, int *ipivot, int dim, dummy_type_cprimme *rhs, int nrhs,
      int ldrhs, dummy_type_cprimme *sol, int ldsol, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(UDUDecompose_Sprimme)
#  define UDUDecompose_Sprimme CONCAT(UDUDecompose_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(UDUDecompose_Rprimme)
#  define UDUDecompose_Rprimme CONCAT(UDUDecompose_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(UDUDecompose_SHprimme)
#  define UDUDecompose_SHprimme CONCAT(UDUDecompose_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(UDUDecompose_RHprimme)
#  define UDUDecompose_RHprimme CONCAT(UDUDecompose_,HOST_REAL_SUF)
#endif
int UDUDecompose_dprimme(dummy_type_dprimme *M, int ldM, dummy_type_dprimme *UDU, int ldUDU,
      int *ipivot, int dimM, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(UDUSolve_Sprimme)
#  define UDUSolve_Sprimme CONCAT(UDUSolve_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(UDUSolve_Rprimme)
#  define UDUSolve_Rprimme CONCAT(UDUSolve_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(UDUSolve_SHprimme)
#  define UDUSolve_SHprimme CONCAT(UDUSolve_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(UDUSolve_RHprimme)
#  define UDUSolve_RHprimme CONCAT(UDUSolve_,HOST_REAL_SUF)
#endif
int UDUSolve_dprimme(dummy_type_dprimme *UDU, int *ipivot, int dim, dummy_type_dprimme *rhs, int nrhs,
      int ldrhs, dummy_type_dprimme *sol, int ldsol, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(update_XKinvBX_Sprimme)
#  define update_XKinvBX_Sprimme CONCAT(update_XKinvBX_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_XKinvBX_Rprimme)
#  define update_XKinvBX_Rprimme CONCAT(update_XKinvBX_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_XKinvBX_SHprimme)
#  define update_XKinvBX_SHprimme CONCAT(update_XKinvBX_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_XKinvBX_RHprimme)
#  define update_XKinvBX_RHprimme CONCAT(update_XKinvBX_,HOST_REAL_SUF)
#endif
int update_XKinvBX_dprimme(dummy_type_dprimme *X, PRIMME_INT ldX, dummy_type_dprimme *KinvBX,
      PRIMME_INT ldKinvBX, dummy_type_dprimme *M, int ldM, int numCols,
      int blockSize, dummy_type_dprimme *Mfact, int ldMfact, int *ipivot,
      primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(MSolve_Sprimme)
#  define MSolve_Sprimme CONCAT(MSolve_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(MSolve_Rprimme)
#  define MSolve_Rprimme CONCAT(MSolve_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(MSolve_SHprimme)
#  define MSolve_SHprimme CONCAT(MSolve_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(MSolve_RHprimme)
#  define MSolve_RHprimme CONCAT(MSolve_,HOST_REAL_SUF)
#endif
int MSolve_dprimme(dummy_type_dprimme *Mfact, int *ipivot, int dim, dummy_type_dprimme *rhs, int nrhs,
      int ldrhs, dummy_type_dprimme *sol, int ldsol, primme_context ctx);
int UDUDecompose_zprimme(dummy_type_zprimme *M, int ldM, dummy_type_zprimme *UDU, int ldUDU,
      int *ipivot, int dimM, primme_context ctx);
int UDUSolve_zprimme(dummy_type_zprimme *UDU, int *ipivot, int dim, dummy_type_zprimme *rhs, int nrhs,
      int ldrhs, dummy_type_zprimme *sol, int ldsol, primme_context ctx);
int update_XKinvBX_zprimme(dummy_type_zprimme *X, PRIMME_INT ldX, dummy_type_zprimme *KinvBX,
      PRIMME_INT ldKinvBX, dummy_type_zprimme *M, int ldM, int numCols,
      int blockSize, dummy_type_zprimme *Mfact, int ldMfact, int *ipivot,
      primme_context ctx);
int MSolve_zprimme(dummy_type_zprimme *Mfact, int *ipivot, int dim, dummy_type_zprimme *rhs, int nrhs,
      int ldrhs, dummy_type_zprimme *sol, int ldsol, primme_context ctx);
int update_XKinvBX_magma_sprimme(dummy_type_magma_sprimme *X, PRIMME_INT ldX, dummy_type_magma_sprimme *KinvBX,
      PRIMME_INT ldKinvBX, dummy_type_sprimme *M, int ldM, int numCols,
      int blockSize, dummy_type_sprimme *Mfact, int ldMfact, int *ipivot,
      primme_context ctx);
int update_XKinvBX_magma_cprimme(dummy_type_magma_cprimme *X, PRIMME_INT ldX, dummy_type_magma_cprimme *KinvBX,
      PRIMME_INT ldKinvBX, dummy_type_cprimme *M, int ldM, int numCols,
      int blockSize, dummy_type_cprimme *Mfact, int ldMfact, int *ipivot,
      primme_context ctx);
int update_XKinvBX_magma_dprimme(dummy_type_magma_dprimme *X, PRIMME_INT ldX, dummy_type_magma_dprimme *KinvBX,
      PRIMME_INT ldKinvBX, dummy_type_dprimme *M, int ldM, int numCols,
      int blockSize, dummy_type_dprimme *Mfact, int ldMfact, int *ipivot,
      primme_context ctx);
int update_XKinvBX_magma_zprimme(dummy_type_magma_zprimme *X, PRIMME_INT ldX, dummy_type_magma_zprimme *KinvBX,
      PRIMME_INT ldKinvBX, dummy_type_zprimme *M, int ldM, int numCols,
      int blockSize, dummy_type_zprimme *Mfact, int ldMfact, int *ipivot,
      primme_context ctx);
#endif
