/*******************************************************************************
 * Copyright (c) 2017, College of William & Mary
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of the College of William & Mary nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COLLEGE OF WILLIAM & MARY BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * PRIMME: https://github.com/primme/primme
 * Contact: Andreas Stathopoulos, a n d r e a s _at_ c s . w m . e d u
 *******************************************************************************
 *   NOTE: THIS FILE IS AUTOMATICALLY GENERATED. PLEASE DON'T MODIFY
 ******************************************************************************/


#ifndef factorize_H
#define factorize_H
int UDUDecompose_sprimme(float *M, int ldM, float *UDU, int ldUDU,
      int *ipivot, int dimM, primme_context ctx);
int UDUSolve_sprimme(float *UDU, int *ipivot, int dim, float *rhs, int nrhs,
      int ldrhs, float *sol, int ldsol, primme_context ctx);
int update_XKinvBX_sprimme(float *X, PRIMME_INT ldX, float *KinvBX,
      PRIMME_INT ldKinvBX, float *M, int ldM, int numCols,
      int blockSize, float *Mfact, int ldMfact, int *ipivot,
      primme_context ctx);
int MSolve_sprimme(float *Mfact, int *ipivot, int dim, float *rhs, int nrhs,
      int ldrhs, float *sol, int ldsol, primme_context ctx);
int UDUDecompose_cprimme(PRIMME_COMPLEX_FLOAT *M, int ldM, PRIMME_COMPLEX_FLOAT *UDU, int ldUDU,
      int *ipivot, int dimM, primme_context ctx);
int UDUSolve_cprimme(PRIMME_COMPLEX_FLOAT *UDU, int *ipivot, int dim, PRIMME_COMPLEX_FLOAT *rhs, int nrhs,
      int ldrhs, PRIMME_COMPLEX_FLOAT *sol, int ldsol, primme_context ctx);
int update_XKinvBX_cprimme(PRIMME_COMPLEX_FLOAT *X, PRIMME_INT ldX, PRIMME_COMPLEX_FLOAT *KinvBX,
      PRIMME_INT ldKinvBX, PRIMME_COMPLEX_FLOAT *M, int ldM, int numCols,
      int blockSize, PRIMME_COMPLEX_FLOAT *Mfact, int ldMfact, int *ipivot,
      primme_context ctx);
int MSolve_cprimme(PRIMME_COMPLEX_FLOAT *Mfact, int *ipivot, int dim, PRIMME_COMPLEX_FLOAT *rhs, int nrhs,
      int ldrhs, PRIMME_COMPLEX_FLOAT *sol, int ldsol, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(UDUDecompose_Sprimme)
#  define UDUDecompose_Sprimme CONCAT(UDUDecompose_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(UDUDecompose_Rprimme)
#  define UDUDecompose_Rprimme CONCAT(UDUDecompose_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(UDUDecompose_SHprimme)
#  define UDUDecompose_SHprimme CONCAT(UDUDecompose_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(UDUDecompose_RHprimme)
#  define UDUDecompose_RHprimme CONCAT(UDUDecompose_,HOST_REAL_SUF)
#endif
int UDUDecompose_dprimme(double *M, int ldM, double *UDU, int ldUDU,
      int *ipivot, int dimM, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(UDUSolve_Sprimme)
#  define UDUSolve_Sprimme CONCAT(UDUSolve_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(UDUSolve_Rprimme)
#  define UDUSolve_Rprimme CONCAT(UDUSolve_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(UDUSolve_SHprimme)
#  define UDUSolve_SHprimme CONCAT(UDUSolve_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(UDUSolve_RHprimme)
#  define UDUSolve_RHprimme CONCAT(UDUSolve_,HOST_REAL_SUF)
#endif
int UDUSolve_dprimme(double *UDU, int *ipivot, int dim, double *rhs, int nrhs,
      int ldrhs, double *sol, int ldsol, primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(update_XKinvBX_Sprimme)
#  define update_XKinvBX_Sprimme CONCAT(update_XKinvBX_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_XKinvBX_Rprimme)
#  define update_XKinvBX_Rprimme CONCAT(update_XKinvBX_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_XKinvBX_SHprimme)
#  define update_XKinvBX_SHprimme CONCAT(update_XKinvBX_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(update_XKinvBX_RHprimme)
#  define update_XKinvBX_RHprimme CONCAT(update_XKinvBX_,HOST_REAL_SUF)
#endif
int update_XKinvBX_dprimme(double *X, PRIMME_INT ldX, double *KinvBX,
      PRIMME_INT ldKinvBX, double *M, int ldM, int numCols,
      int blockSize, double *Mfact, int ldMfact, int *ipivot,
      primme_context ctx);
#if !defined(CHECK_TEMPLATE) && !defined(MSolve_Sprimme)
#  define MSolve_Sprimme CONCAT(MSolve_,SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(MSolve_Rprimme)
#  define MSolve_Rprimme CONCAT(MSolve_,REAL_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(MSolve_SHprimme)
#  define MSolve_SHprimme CONCAT(MSolve_,HOST_SCALAR_SUF)
#endif
#if !defined(CHECK_TEMPLATE) && !defined(MSolve_RHprimme)
#  define MSolve_RHprimme CONCAT(MSolve_,HOST_REAL_SUF)
#endif
int MSolve_dprimme(double *Mfact, int *ipivot, int dim, double *rhs, int nrhs,
      int ldrhs, double *sol, int ldsol, primme_context ctx);
int UDUDecompose_zprimme(PRIMME_COMPLEX_DOUBLE *M, int ldM, PRIMME_COMPLEX_DOUBLE *UDU, int ldUDU,
      int *ipivot, int dimM, primme_context ctx);
int UDUSolve_zprimme(PRIMME_COMPLEX_DOUBLE *UDU, int *ipivot, int dim, PRIMME_COMPLEX_DOUBLE *rhs, int nrhs,
      int ldrhs, PRIMME_COMPLEX_DOUBLE *sol, int ldsol, primme_context ctx);
int update_XKinvBX_zprimme(PRIMME_COMPLEX_DOUBLE *X, PRIMME_INT ldX, PRIMME_COMPLEX_DOUBLE *KinvBX,
      PRIMME_INT ldKinvBX, PRIMME_COMPLEX_DOUBLE *M, int ldM, int numCols,
      int blockSize, PRIMME_COMPLEX_DOUBLE *Mfact, int ldMfact, int *ipivot,
      primme_context ctx);
int MSolve_zprimme(PRIMME_COMPLEX_DOUBLE *Mfact, int *ipivot, int dim, PRIMME_COMPLEX_DOUBLE *rhs, int nrhs,
      int ldrhs, PRIMME_COMPLEX_DOUBLE *sol, int ldsol, primme_context ctx);
int update_XKinvBX_smagmaprimme(magma_float *X, PRIMME_INT ldX, magma_float *KinvBX,
      PRIMME_INT ldKinvBX, float *M, int ldM, int numCols,
      int blockSize, float *Mfact, int ldMfact, int *ipivot,
      primme_context ctx);
int update_XKinvBX_cmagmaprimme(magma_complex_float *X, PRIMME_INT ldX, magma_complex_float *KinvBX,
      PRIMME_INT ldKinvBX, PRIMME_COMPLEX_FLOAT *M, int ldM, int numCols,
      int blockSize, PRIMME_COMPLEX_FLOAT *Mfact, int ldMfact, int *ipivot,
      primme_context ctx);
int update_XKinvBX_dmagmaprimme(magma_double *X, PRIMME_INT ldX, magma_double *KinvBX,
      PRIMME_INT ldKinvBX, double *M, int ldM, int numCols,
      int blockSize, double *Mfact, int ldMfact, int *ipivot,
      primme_context ctx);
int update_XKinvBX_zmagmaprimme(magma_complex_double *X, PRIMME_INT ldX, magma_complex_double *KinvBX,
      PRIMME_INT ldKinvBX, PRIMME_COMPLEX_DOUBLE *M, int ldM, int numCols,
      int blockSize, PRIMME_COMPLEX_DOUBLE *Mfact, int ldMfact, int *ipivot,
      primme_context ctx);
#endif
